/*
* @Author: gpi
* @Date:   2019-02-22 16:19:03
* @Last Modified by:   gpinchon
* @Last Modified time: 2019-08-11 12:07:19
*/

#pragma once

#include <SDL2/SDL_events.h> // for SDL_Event, SDL_EventType
#include <SDL2/SDL_stdinc.h> // for Uint32
#include <map> // for map
#include <set>
#include <vector>
#include <memory>

#define EVENT_REFRESH 0

class InputDevice;
class Callback;

/** Handles InputDevice and events generated by the Engine
*/
class Events {
public:
    static void Add(InputDevice* device, SDL_EventType event_type);
    static void remove(InputDevice* device, SDL_EventType event_type);
    static int filter(void* e, SDL_Event* event);
    static int refresh(void);
    static void AddRefreshCallback(std::shared_ptr<Callback> callback);
    static void RemoveRefreshCallback(std::shared_ptr<Callback> callback);
    static double delta_time();

private:
    static Events& _get();
    static Events* _instance;
    double _delta_time { 0 };
    std::vector<std::shared_ptr<Callback>> _rcallbacks;
    std::map<Uint32, std::set<InputDevice*>> _input_devices;
    Events();
};
