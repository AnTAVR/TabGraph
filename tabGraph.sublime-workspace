{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"com",
				"comm-section\tComment - Full section comment"
			],
			[
				"comm",
				"comm-block\tComment - Block style comment"
			],
			[
				"brdf",
				"brdfLUT"
			],
			[
				"inc",
				"inc\t#include \"…\""
			],
			[
				"defin",
				"defines"
			],
			[
				"get",
				"_get"
			],
			[
				"bind",
				"bind_default"
			],
			[
				"cont",
				"continue"
			],
			[
				"even",
				"eventsMutex"
			],
			[
				"DURATION",
				"MODEL3D_PRELOAD_DURATION"
			],
			[
				"meanAno",
				"meanAnomaly"
			]
		]
	},
	"buffers":
	[
		{
			"file": "tests/terrain/main.cpp",
			"settings":
			{
				"buffer_size": 1089,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Terrain_GDAL.cpp",
			"settings":
			{
				"buffer_size": 6081,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".sublime-project",
			"settings":
			{
				"buffer_size": 415,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nEasyClangComplete\n-----------------\n\n  A plugin for easy to use clang-based completions::\n  \n      ╔═╗┌─┐┌─┐┬ ┬  ╔═╗┬  ┌─┐┌┐┌┌─┐  ╔═╗┌─┐┌┬┐┌─┐┬  ┌─┐┌┬┐┌─┐\n      ║╣ ├─┤└─┐└┬┘  ║  │  ├─┤││││ ┬  ║  │ ││││├─┘│  ├┤  │ ├┤\n      ╚═╝┴ ┴└─┘ ┴   ╚═╝┴─┘┴ ┴┘└┘└─┘  ╚═╝└─┘┴ ┴┴  ┴─┘└─┘ ┴ └─┘\n  \n  Let't get started!\n  ==================\n  \n  You're just two steps away!\n  \n  1. Install clang\n  ----------------\n  \n  - **Ubuntu**        : ``sudo apt-get install clang``\n  - **OSX**           : ships `clang` by default. You are all set!\n  - **Windows**       : install the latest release from clang website.\n  - **Other Systems** : use your package manager or install from clang website.\n  - clang website: http://llvm.org/releases/download.html\n  \n  2. Configure your includes\n  --------------------------\n  \n  Using CMake?\n  ~~~~~~~~~~~~\n  \n  Plugin will run cmake on a proper ``CMakeLists.txt`` in your project folder and\n  will use information from it to complete your code out of the box.\n  \n  Don't like CMake?\n  ~~~~~~~~~~~~~~~~~~\n  \n  There are many ways of configuring the plugin!\n  Read the docs here: https://niosus.github.io/EasyClangComplete/configs/\n  \n  That's it! You're ready to use the plugin!\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  Intro and Documentation\n  ~~~~~~~~~~~~~~~~~~~~~~~\n  \n  https://niosus.github.io/EasyClangComplete/\n  \n  Thanks!\n  =======\n  \n  💜 this plugin? Consider buying me a 🍵\n  https://niosus.github.io/EasyClangComplete/support/\n",
			"settings":
			{
				"buffer_size": 1517,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "src/Camera.cpp",
			"settings":
			{
				"buffer_size": 2935,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/minimalGdal.sh",
			"settings":
			{
				"buffer_size": 19039,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tests/terrain/build/terrain_test.txt",
			"settings":
			{
				"buffer_size": 7901055,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/code/project/studio-4.2/include/networkLegacy/CommandId.h",
			"settings":
			{
				"buffer_size": 660,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Terrain.cpp",
			"settings":
			{
				"buffer_size": 6910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 7510,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Engine.cpp",
			"settings":
			{
				"buffer_size": 4843,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Render.cpp",
			"settings":
			{
				"buffer_size": 26039,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 7078 files for \"throw\"\n\nD:\\code\\perso\\tabGraph\\include\\parser\\InternalTools.hpp:\n  111  std::string fileFormat(const std::string &path);\n  112  \n  113: //Attempts to access file then open it, throws if it can't\n  114  FILE        *openFile(const std::string &path, const std::string &mod = \"rb\");\n  115  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\gdal_unit_test.cpp:\n   54          std::string grpname(name);\n   55          if (grpname.empty())\n   56:             throw std::runtime_error(\"missing test group name\");\n   57  \n   58          tut::groupnames gl = runner.get().list_groups();\n   59          tut::groupnames::const_iterator found = std::find(gl.begin(), gl.end(), grpname);\n   60          if (found == gl.end())\n   61:             throw std::runtime_error(\"test group \" + grpname + \" not found\");\n   62      }\n   63  } // namespace tut\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut.hpp:\n   87       * test object creation which may be time-consuming depending\n   88       * on operations described in Data::Data() and Data::~Data().\n   89:      * TODO: replace with throwing special exception from default test.\n   90       */\n   91      bool called_method_was_a_dummy_test_;\n   ..\n  158      {\n  159          T* p_;\n  160:         bool permit_throw_in_dtor;\n  161  \n  162          safe_holder(const safe_holder&);\n  ...\n  166          safe_holder()\n  167              : p_(nullptr),\n  168:               permit_throw_in_dtor(false)\n  169          {\n  170          }\n  ...\n  186  \n  187          /**\n  188:          * Tell ptr it can throw from destructor. Right way is to\n  189           * use std::uncaught_exception(), but some compilers lack\n  190           * correct implementation of the function.\n  191           */\n  192:         void permit_throw()\n  193          {\n  194:             permit_throw_in_dtor = true;\n  195          }\n  196  \n  ...\n  199           * if test itself failed, exceptions in destructor\n  200           * are ignored; if test was successful and destructor failed,\n  201:          * warning exception throwed.\n  202           */\n  203          void release()\n  ...\n  207                  if (delete_obj() == false)\n  208                  {\n  209:                     throw warning(\"destructor of test object raised\"\n  210                          \" an SEH exception\");\n  211                  }\n  ...\n  213              catch (const std::exception& ex)\n  214              {\n  215:                 if (permit_throw_in_dtor)\n  216                  {\n  217                      std::string msg = \"destructor of test object raised\"\n  218                          \" exception: \";\n  219                      msg += ex.what();\n  220:                     throw warning(msg);\n  221                  }\n  222              }\n  223              catch( ... )\n  224              {\n  225:                 if (permit_throw_in_dtor)\n  226                  {\n  227:                     throw warning(\"destructor of test object raised an\"\n  228                          \" exception\");\n  229                  }\n  ...\n  237          {\n  238              release();\n  239:             permit_throw_in_dtor = false;\n  240              p_ = new T();\n  241          }\n  ...\n  254              __except(handle_seh_(::GetExceptionCode()))\n  255              {\n  256:                 if (permit_throw_in_dtor)\n  257                  {\n  258                      return false;\n  ...\n  373  \t\t\t{\n  374  \t\t\t\tcase SEH_CTOR:\n  375: \t\t\t\t\tthrow bad_ctor(\"seh\");\n  376  \t\t\t\t\tbreak;\n  377  \n  378  \t\t\t\tcase SEH_TEST:\n  379: \t\t\t\t\tthrow seh(\"seh\");\n  380  \t\t\t\t\tbreak;\n  381  \n  ...\n  389              }\n  390          }\n  391:         catch (const rethrown& ex)\n  392          {\n  393              tr = ex.tr;\n  394:             tr.result = test_result::rethrown;\n  395          }\n  396          catch (const tut_error& ex)\n  ...\n  467  \n  468          current_test_name = obj->get_test_name();\n  469:         obj.permit_throw();\n  470          obj.release();\n  471  #if defined(TUT_USE_SEH)\n  ...\n  487          catch (const std::exception& ex)\n  488          {\n  489:             throw bad_ctor(ex.what());\n  490          }\n  491          catch (...)\n  492          {\n  493:             throw bad_ctor(\"test constructor has generated an exception;\"\n  494                  \" group execution is terminated\");\n  495          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_assert.hpp:\n   37  /**\n   38   * Tests provided condition.\n   39:  * Throws if false.\n   40   */\n   41  static inline void ensure(bool cond)\n   ..\n   44      {\n   45          // TODO: default ctor?\n   46:         throw failure(\"\");\n   47      }\n   48  }\n   ..\n   50  /**\n   51   * Tests provided condition.\n   52:  * Throws if true.\n   53   */\n   54  static inline void ensure_not(bool cond)\n   ..\n   59  /**\n   60   * Tests provided condition.\n   61:  * Throws if false.\n   62   */\n   63  template <typename M>\n   ..\n   66      if (!cond)\n   67      {\n   68:         throw failure(msg);\n   69      }\n   70  }\n   ..\n   72  /**\n   73   * Tests provided condition.\n   74:  * Throws if true.\n   75   */\n   76  template <typename M>\n   ..\n   82  /**\n   83   * Tests two objects for being equal.\n   84:  * Throws if false.\n   85   *\n   86   * NB: both T and Q must have operator << defined somewhere, or\n   ..\n   99             << actual\n  100             << '\\'';\n  101:         throw failure(ss.str());\n  102      }\n  103  }\n  ...\n  136             << \" actual \" << actual\n  137             << \" with precision \" << epsilon;\n  138:         throw failure(ss.str());\n  139      }\n  140  }\n  ...\n  142   * Tests two objects for being at most in given distance one from another.\n  143   * Borders are excluded.\n  144:  * Throws if false.\n  145   *\n  146   * NB: T must have operator << defined somewhere, or\n  ...\n  164              << actual\n  165              << '\\'';\n  166:         throw failure(ss.str());\n  167      }\n  168  }\n  ...\n  184          detail::msg_prefix(ss,msg)\n  185             << strerror_r(errno, e, sizeof(e));\n  186:         throw failure(ss.str());\n  187  #else\n  188:         throw failure(msg);\n  189  #endif\n  190      }\n  ...\n  196  static inline void fail(const char* msg = \"\")\n  197  {\n  198:     throw failure(msg);\n  199  }\n  200  \n  ...\n  202  void fail(const M& msg)\n  203  {\n  204:     throw failure(msg);\n  205  }\n  206  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_console_reporter.hpp:\n   36          os << '[' << tr.test << \"=T]\";\n   37          break;\n   38:     case tut::test_result::rethrown:\n   39          os << '[' << tr.test << \"=P]\";\n   40          break;\n   ..\n  102                  break;\n  103              case test_result::fail:\n  104:             case test_result::rethrown:\n  105                  failures_count++;\n  106                  break;\n  ...\n  152                  switch(tr.result)\n  153                  {\n  154:                 case test_result::rethrown:\n  155                      os << \"assertion failed in child\" << std::endl;\n  156                      break;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_exception.hpp:\n   23      }\n   24  \n   25:     const char* what() const throw() CPL_OVERRIDE\n   26      {\n   27          return err_msg.c_str();\n   28      }\n   29  \n   30:     ~tut_error() throw()\n   31      {\n   32      }\n   ..\n   47      }\n   48  \n   49:     ~no_such_group() throw()\n   50      {\n   51      }\n   ..\n   53  \n   54  /**\n   55:  * Internal exception to be throwed when\n   56   * test constructor has failed.\n   57   */\n   ..\n   68      }\n   69  \n   70:     ~bad_ctor() throw()\n   71      {\n   72      }\n   ..\n   74  \n   75  /**\n   76:  * Exception to be throwed when ensure() fails or fail() called.\n   77   */\n   78  struct failure : public tut_error\n   ..\n   88      }\n   89  \n   90:     ~failure() throw()\n   91      {\n   92      }\n   ..\n   94  \n   95  /**\n   96:  * Exception to be thrown when test destructor threw an exception.\n   97   */\n   98  struct warning : public tut_error\n   ..\n  108      }\n  109  \n  110:     ~warning() throw()\n  111      {\n  112      }\n  ...\n  114  \n  115  /**\n  116:  * Exception to be throwed when test issued SEH (Win32)\n  117   */\n  118  struct seh : public tut_error\n  ...\n  128      }\n  129  \n  130:     ~seh() throw()\n  131      {\n  132      }\n  ...\n  134  \n  135  /**\n  136:  * Exception to be throwed when child processes fail.\n  137   */\n  138: struct rethrown : public failure\n  139  {\n  140:     explicit rethrown(const test_result &resultIn)\n  141          : failure(resultIn.message), tr(resultIn)\n  142      {\n  ...\n  145      virtual test_result::result_type result() const CPL_OVERRIDE\n  146      {\n  147:         return test_result::rethrown;\n  148      }\n  149  \n  150:     ~rethrown() throw()\n  151      {\n  152      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_posix.hpp:\n  150                  try {\n  151                      kill_child_(i->first);\n  152:                 } catch(const rethrown &ex) {\n  153:                     ss << std::endl << \"child \" << ex.tr.pid << \" has thrown an exception: \" << ex.what();\n  154                  } catch(const failure &ex) {\n  155                      ss << std::endl << ex.what();\n  ...\n  351              {\n  352                  ss.write(buffer, r);\n  353:                 throw rethrown( receive_result_(ss, pid) );\n  354              }\n  355          }\n  ...\n  366                  << \": expected exit with code \" << exit_status;\n  367  \n  368:             throw failure(ss.str().c_str());\n  369          }\n  370  \n  ...\n  380                      << '\\'';\n  381  \n  382:                 throw failure(ss.str().c_str());\n  383              }\n  384          }\n  ...\n  389              ss << \"child stopped by signal \" << WTERMSIG(status)\n  390                  << \": expected exit with code \" << exit_status;\n  391:             throw failure(ss.str().c_str());\n  392          }\n  393      }\n  ...\n  405                      << WTERMSIG(status)\n  406                      << '\\'';\n  407:                 throw failure(ss.str().c_str());\n  408              }\n  409          }\n  ...\n  415                  << \": expected signal \" << signal;\n  416  \n  417:             throw failure(ss.str().c_str());\n  418          }\n  419  \n  ...\n  424                  << \": expected kill by signal \" << signal;\n  425  \n  426:             throw failure(ss.str().c_str());\n  427          }\n  428      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_restartable.hpp:\n   75              if (i == e)\n   76              {\n   77:                 throw std::invalid_argument(\"unexpected end of string\");\n   78              }\n   79              unsigned int c1 = *i;\n   ..\n   81              if (i == e)\n   82              {\n   83:                 throw std::invalid_argument(\"unexpected end of string\");\n   84              }\n   85              unsigned int c2 = *i;\n   ..\n  116          os << 4;\n  117          break;\n  118:     case test_result::rethrown:\n  119          os << 5;\n  120          break;\n  ...\n  125          assert(!\"Should never be called\");\n  126      default:\n  127:         throw std::logic_error(\"operator << : bad result_type\");\n  128      }\n  129      os << ' ' << escape(tr.message) << std::endl;\n  ...\n  146      if (tr.test < 0)\n  147      {\n  148:         throw std::logic_error(\"operator >> : bad test number\");\n  149      }\n  150  \n  ...\n  169          break;\n  170      case 5:\n  171:         tr.result = test_result::rethrown;\n  172          break;\n  173      case 6:\n  ...\n  175          break;\n  176      default:\n  177:         throw std::logic_error(\"operator >> : bad result_type\");\n  178      }\n  179  \n  ...\n  183      if (!is.good())\n  184      {\n  185:         throw std::logic_error(\"malformed test result\");\n  186      }\n  187      return true;\n  ...\n  350          if (!ojournal.good())\n  351          {\n  352:             throw std::runtime_error(\"unable to register test result in file \"\n  353                  + jrn_);\n  354          }\n  ...\n  365          if (!olog.good())\n  366          {\n  367:             throw std::runtime_error(\"unable to register execution in file \"\n  368                  + log_);\n  369          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_result.hpp:\n   54       * ok - test finished successfully\n   55       * fail - test failed with ensure() or fail() methods\n   56:      * ex - test throwed an exceptions\n   57:      * warn - test finished successfully, but test destructor throwed\n   58       * term - test forced test application to terminate abnormally\n   59       */\n   ..\n   66          term,\n   67          ex_ctor,\n   68:         rethrown,\n   69          dummy\n   70      };\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\cpp\\tut\\tut_runner.hpp:\n  125          if (gr == nullptr)\n  126          {\n  127:             throw tut_error(\"group shall be non-null\");\n  128          }\n  129  \n  ...\n  134              // TODO: should this message appear in stream?\n  135              std::cerr << msg << std::endl;\n  136:             throw tut_error(msg);\n  137          }\n  138  \n  ...\n  228          {\n  229              cb_run_completed_();\n  230:             throw no_such_group(group_name);\n  231          }\n  232  \n  ...\n  248          {\n  249              cb_run_completed_();\n  250:             throw no_such_group(group_name);\n  251          }\n  252  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\autotest\\ogr\\ogr_dxf.py:\n 3452          pytest.fail('Wrong geometry on INSERT attribute 8')\n 3453  \n 3454:     # Also throw in a test of a weird SPLINE generated by a certain CAD package\n 3455      # with a knot vector that does not start at zero\n 3456      f = lyr.GetNextFeature()\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\configure:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\configure.ac:\n  109  \n  110  dnl gnu89 is a reasonable target to get MSVC compatibility.\n  111: dnl but only apply it with gcc, since clang will throw a lot of warnings\n  112  SAVED_CFLAGS=$CFLAGS\n  113  CFLAGS=\"$CFLAGS $ERROR_ON_UNKNOWN_OPTIONS -std=gnu89\"\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\libtool:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ltmain.sh:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\NEWS:\n 3454   * support floating point coordinates for the source windows of Band.ReadRaster() and Band.ReadAsArray()\n 3455   * fix build with SWIG 3.0.6 (#6045)\n 3456:  * make gdal.OpenEx() throw a Python exception in case of failed open when exceptions are enables with gdal.UseExceptions() (#6075)\n 3457   * Disable opening a NumPy dataset with a filename returned by gdal_array.GetArrayFilename(() unless GDAL_ARRAY_OPEN_BY_FILENAME is set to TRUE\n 3458   * disable the warning about using deprecated wkb25DBit constant as it uses a trick that prevents the bindings from being used by py2exe / pyinstaller (#6364)\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\stP1kAlM:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\alg\\gdalpansharpen.cpp:\n  381      {\n  382          CPLDebug(\"PANSHARPEN\", \"Using %d threads\", nThreads);\n  383:         poThreadPool = new (std::nothrow) CPLWorkerThreadPool();\n  384          // coverity[tainted_data]\n  385          if( poThreadPool == nullptr ||\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\alg\\gdalwarpkernel.cpp:\n  375          }\n  376  \n  377:         psThreadData->poThreadPool = new (std::nothrow) CPLWorkerThreadPool();\n  378          if( psThreadData->poThreadPool == nullptr ||\n  379              !psThreadData->poThreadPool->Setup(nThreads,\n  ...\n 4382          eErr = CE_Warning;\n 4383          if( warper != nullptr )\n 4384:             throw eErr;\n 4385          return eErr;\n 4386      }\n ....\n 4395          CPLError( CE_Failure, CPLE_UserInterrupt, \"User terminated\" );\n 4396          eErr = CE_Failure;\n 4397:         throw eErr;\n 4398      }\n 4399  \n ....\n 4414                            static_cast<int>(err), __LINE__ );\n 4415                  eErr = CE_Failure;\n 4416:                 throw eErr;\n 4417              }\n 4418          }\n ....\n 4427                       static_cast<int>(err), __LINE__);\n 4428              eErr = CE_Failure;\n 4429:             throw eErr;\n 4430          }\n 4431  \n ....\n 4439                       static_cast<int>(err), __LINE__);\n 4440              eErr = CE_Failure;\n 4441:             throw eErr;\n 4442          }\n 4443      }\n ....\n 4552  \n 4553      if( eErr != CE_None )\n 4554:         throw eErr;\n 4555  \n 4556      err = GDALWarpKernelOpenCL_runResamp(warper,\n ....\n 4570                   static_cast<int>(err), __LINE__);\n 4571          eErr = CE_Failure;\n 4572:         throw eErr;\n 4573      }\n 4574  \n ....\n 4592                            static_cast<int>(err), __LINE__ );\n 4593                  eErr = CE_Failure;\n 4594:                 throw eErr;\n 4595              }\n 4596  \n ....\n 4640                           static_cast<int>(poWK->eWorkingDataType) );\n 4641                  eErr = CE_Failure;\n 4642:                 throw eErr;\n 4643              }\n 4644          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\alg\\internal_libqhull\\user.h:\n   66  #define MSG_STDERR  8000  /* log messages Written to qh.ferr */\n   67  #define MSG_OUTPUT  9000\n   68: #define MSG_QHULL_ERROR 10000 /* errors thrown by QhullError [QhullError.h] */\n   69  #define MSG_FIXUP  11000  /* FIXUP QH11... */\n   70  #define MSG_MAXLEN  3000 /* qh_printhelp_degenerate() in user.c */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\apps\\ogrdissolve.cpp:\n  580           ++pos) {\n  581  \n  582:              /* we currently throw out any null field values at this time */\n  583             //  if (!(pos->first.empty())) {\n  584                   poFieldsmap[CPLString(pos->first.c_str())] = 1;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\autom4te.cache\\output.0:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\autom4te.cache\\output.1:\n    <binary>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\autom4te.cache\\traces.0:\n  827  \n  828    dnl Test for BSD systems that support ftello/fseeko.\n  829:   dnl OpenBSD throws warnings about using strcpy/strcat, so we use CC instead of CXX\n  830  \n  831    if test x\"$with_unix_stdio_64\" = x\"\" ; then\n  ...\n 3416                      ;;\n 3417                    *.la)\n 3418:                     dnl Handle this in the next round. Throw away the .la's\n 3419                      dnl directory; it is already contained in a preceding -L\n 3420                      dnl option.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\cosar\\cosar_dataset.cpp:\n  109          || nRSFV >= this->nRTNB || nRSLV > this->nRTNB)\n  110      {\n  111:         /* throw an error */\n  112          CPLError(CE_Failure, CPLE_AppDefined,\n  113                   \"RSLV/RSFV values are not sane... oh dear.\\n\");\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\dods\\dodsdataset2.cpp:\n  193      BaseTypeFactory *poBaseTypeFactory;\n  194  \n  195:     AISConnect *connect_to_server() /*throw(Error)*/;\n  196  \n  197      static string      SubConstraint( string raw_constraint,\n  ...\n  321  \n  322  AISConnect *\n  323: DODSDataset::connect_to_server() /*throw(Error)*/\n  324  {\n  325      // does the string start with 'http?'\n  326      if (oURL.find(\"http://\") == string::npos\n  327          && oURL.find(\"https://\") == string::npos)\n  328:         throw Error(\n  329              \"The URL does not start with 'http' or 'https,' I won't try connecting.\");\n  330  \n  ...\n 1130      if( poDDSDef == nullptr )\n 1131      {\n 1132:         throw InternalErr(\n 1133              CPLSPrintf( \"Could not find DDS definition for variable %s.\",\n 1134                          oVarNameIn.c_str() ) );\n ....\n 1153      if( !poArray )\n 1154      {\n 1155:         throw InternalErr(\n 1156              CPLSPrintf( \"Variable %s is not a grid or an array.\",\n 1157                          oVarNameIn.c_str() ) );\n ....\n 1172        case dods_float64_c: eDataType = GDT_Float64; break;\n 1173        default:\n 1174:         throw Error(\"The DODS GDAL driver supports only numeric data types.\");\n 1175      }\n 1176  \n ....\n 1181      if( poArray->dimensions() < 2 )\n 1182      {\n 1183:         throw Error(\"Variable does not have even 2 dimensions.  For now this is required.\" );\n 1184      }\n 1185  \n ....\n 1191      if( iXDim == -1 || iYDim == -1 )\n 1192      {\n 1193:         throw Error(\"Missing [x] or [y] in constraint.\" );\n 1194      }\n 1195  \n ....\n 1478          BaseType *poBt = get_variable(data, oVarName );\n 1479          if (!poBt)\n 1480:             throw Error(\n 1481                  string(\"I could not read the variable '\")\n 1482                  + oVarName + string(\"' from the data source at:\\n\")\n ....\n 1503          if( !poA )\n 1504          {\n 1505:             throw InternalErr(\"Expected an Array or Grid variable!\");\n 1506          }\n 1507  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\fits\\fitsdataset.cpp:\n  361                  if (status)\n  362                  {\n  363:                     // Throw a warning with CFITSIO error status, then ignore status \n  364                      CPLError(CE_Warning, CPLE_AppDefined,\n  365                               \"Couldn't update key %s in FITS file %s (%d).\",\n  ...\n  379          if (status)\n  380          {\n  381:             // Throw a warning with CFITSIO error status, then ignore status \n  382              CPLError(CE_Warning, CPLE_AppDefined,\n  383                      \"Couldn't update key BLANK in FITS file %s (%d).\",\n  ...\n  397          if (status)\n  398          {\n  399:             // Throw a warning with CFITSIO error status, then ignore status \n  400              CPLError(CE_Warning, CPLE_AppDefined,\n  401                      \"Couldn't update key BSCALE in FITS file %s (%d).\",\n  ...\n  407          if (status)\n  408          {\n  409:             // Throw a warning with CFITSIO error status, then ignore status \n  410              CPLError(CE_Warning, CPLE_AppDefined,\n  411                      \"Couldn't update key BZERO in FITS file %s (%d).\",\n  ...\n  844          if (status)\n  845          {\n  846:             // Throw a warning with CFITSIO error status, then ignore status \n  847              CPLError(CE_Warning, CPLE_AppDefined,\n  848                      \"Couldn't update key A_RADIUS in FITS file %s (%d).\",\n  ...\n  854          if (status)\n  855          {\n  856:             // Throw a warning with CFITSIO error status, then ignore status \n  857              CPLError(CE_Warning, CPLE_AppDefined,\n  858                      \"Couldn't update key B_RADIUS in FITS file %s (%d).\",\n  ...\n  864          if (status)\n  865          {\n  866:             // Throw a warning with CFITSIO error status, then ignore status \n  867              CPLError(CE_Warning, CPLE_AppDefined,\n  868                      \"Couldn't update key C_RADIUS in FITS file %s (%d).\",\n  ...\n  928              if (status)\n  929              {\n  930:                 // Throw a warning with CFITSIO error status, then ignore status \n  931                  CPLError(CE_Warning, CPLE_AppDefined,\n  932                          \"Couldn't update key CTYPE1 in FITS file %s (%d).\",\n  ...\n  941              if (status)\n  942              {\n  943:                 // Throw a warning with CFITSIO error status, then ignore status \n  944                  CPLError(CE_Warning, CPLE_AppDefined,\n  945                          \"Couldn't update key CTYPE2 in FITS file %s (%d).\",\n  ...\n  982          if (status)\n  983          {\n  984:             // Throw a warning with CFITSIO error status, then ignore status \n  985              CPLError(CE_Warning, CPLE_AppDefined,\n  986                      \"Couldn't update key CRVAL1 in FITS file %s (%d).\",\n  ...\n  992          if (status)\n  993          {\n  994:             // Throw a warning with CFITSIO error status, then ignore status \n  995              CPLError(CE_Warning, CPLE_AppDefined,\n  996                      \"Couldn't update key CRVAL2 in FITS file %s (%d).\",\n  ...\n 1002          if (status)\n 1003          {\n 1004:             // Throw a warning with CFITSIO error status, then ignore status \n 1005              CPLError(CE_Warning, CPLE_AppDefined,\n 1006                      \"Couldn't update key CRPIX1 in FITS file %s (%d).\",\n ....\n 1012          if (status)\n 1013          {\n 1014:             // Throw a warning with CFITSIO error status, then ignore status \n 1015              CPLError(CE_Warning, CPLE_AppDefined,\n 1016                      \"Couldn't update key CRPIX2 in FITS file %s (%d).\",\n ....\n 1047              if (status)\n 1048              {\n 1049:                 // Throw a warning with CFITSIO error status, then ignore status \n 1050                  CPLError(CE_Warning, CPLE_AppDefined,\n 1051                          \"Couldn't update key CDELT1 in FITS file %s (%d).\",\n ....\n 1058              if (status)\n 1059              {\n 1060:                 // Throw a warning with CFITSIO error status, then ignore status \n 1061                  CPLError(CE_Warning, CPLE_AppDefined,\n 1062                          \"Couldn't update key CDELT2 in FITS file %s (%d).\",\n ....\n 1069              if (status)\n 1070              {\n 1071:                 // Throw a warning with CFITSIO error status, then ignore status \n 1072                  CPLError(CE_Warning, CPLE_AppDefined,\n 1073                          \"Couldn't update key PC1_1 in FITS file %s (%d).\",\n ....\n 1080              if (status)\n 1081              {\n 1082:                 // Throw a warning with CFITSIO error status, then ignore status \n 1083                  CPLError(CE_Warning, CPLE_AppDefined,\n 1084                          \"Couldn't update key PC1_2 in FITS file %s (%d).\",\n ....\n 1091              if (status)\n 1092              {\n 1093:                 // Throw a warning with CFITSIO error status, then ignore status \n 1094                  CPLError(CE_Warning, CPLE_AppDefined,\n 1095                          \"Couldn't update key PC2_1 in FITS file %s (%d).\",\n ....\n 1102              if (status)\n 1103              {\n 1104:                 // Throw a warning with CFITSIO error status, then ignore status \n 1105                  CPLError(CE_Warning, CPLE_AppDefined,\n 1106                          \"Couldn't update key PC2_2 in FITS file %s (%d).\",\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\grib\\degrib\\degrib\\degrib2.cpp:\n  843   *    or we haven't read any messages.  In either case we need to read the\n  844   *    next message from file. If f_endMsg is false, then there is more to read\n  845:  *    from IS->ipack, so we don't want to throw it out, nor have to re-read\n  846   *    ipack from disk.\n  847   *\n  ...\n  914      * next message from file.\n  915      * If f_endMsg is false, then there is more to read from IS->ipack, so we\n  916:     * don't want to throw it out, nor have to re-read ipack from disk.\n  917      */\n  918     l3264b = sizeof (sInt4) * 8;\n  ...\n 1418      * next message from file.\n 1419      * If f_endMsg is false, then there is more to read from IS->ipack, so we\n 1420:     * don't want to throw it out, nor have to re-read ipack from disk.\n 1421      */\n 1422     l3264b = sizeof (sInt4) * 8;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\gta\\gtadataset.cpp:\n  136  \n  137    public:\n  138:     GTAIO( ) throw ()\n  139          : fp( nullptr )\n  140      {\n  ...\n  166      }\n  167  \n  168:     virtual size_t read(void *buffer, size_t size, bool *error) throw () override\n  169      {\n  170          size_t s;\n  ...\n  178      }\n  179  \n  180:     virtual size_t write(const void *buffer, size_t size, bool *error) throw () override\n  181      {\n  182          size_t s;\n  ...\n  190      }\n  191  \n  192:     virtual bool seekable() throw () override\n  193      {\n  194          return true;\n  195      }\n  196  \n  197:     virtual void seek(intmax_t offset, int whence, bool *error) throw () override\n  198      {\n  199          int r;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\gtiff\\libgeotiff\\geo_set.c:\n  183              break;\n  184          case TYPE_ASCII:\n  185:             /* throw away existing data and allocate room for new data */\n  186              if (key->gk_data != 0)\n  187              {\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\gtiff\\libtiff\\tif_dirinfo.c:\n   36   * NOTE: The second field (field_readcount) and third field (field_writecount)\n   37   *       sometimes use the values TIFF_VARIABLE (-1), TIFF_VARIABLE2 (-3)\n   38:  *       and TIFF_SPP (-2). The macros should be used but would throw off\n   39   *       the formatting of the code, so please interpret the -1, -2 and -3\n   40   *       values accordingly.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\jp2kak\\jp2kakdataset.h:\n  217          if( end_of_message && m_eErrClass == CE_Failure )\n  218          {\n  219:             throw JP2KAKException();\n  220          }\n  221      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\jp2lura\\jp2luradataset.cpp:\n  823                          GetErrorMessage(error));\n  824  \n  825:             throw pcMsg;\n  826          }\n  827  \n  ...\n  865                  }\n  866  \n  867:                 throw pcMsg;\n  868              }\n  869          }\n  ...\n  873                       \"Environment variables LURA_LICENSE_NUM_1 and \"\n  874                       \"LURA_LICENSE_NUM_2 not configured.\");\n  875:             throw pcMsg;\n  876          }\n  877  \n  ...\n  884                          \"Internal library error (%s) while setting %s.\", \\\n  885                           GetErrorMessage(l_error), #prop); \\\n  886:                 throw pcMsg; \\\n  887            } \\\n  888          } while(0);\n  ...\n  901          if (fp == nullptr)\n  902          {\n  903:             throw \"Cannot create file\";\n  904          }\n  905  \n  ...\n 1285                      VSIFCloseL(fpSrc);\n 1286  \n 1287:                     throw \"Cannot read source codestream\";\n 1288                  }\n 1289  \n ....\n 1313                      VSIFCloseL(fpSrc);\n 1314  \n 1315:                     throw \"Cannot write source codestream\";\n 1316                  }\n 1317                  nRead += nToRead;\n ....\n 1386                          \"Internal library error (%s) while setting %s.\", \\\n 1387                           GetErrorMessage(l_error), #prop); \\\n 1388:                 throw pcMsg; \\\n 1389            } \\\n 1390          } while(0);\n ....\n 1526                           GetErrorMessage(error));\n 1527  \n 1528:                 throw pcMsg;\n 1529              }\n 1530          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\jpeg\\libjpeg\\jdhuff.c:\n  480    int ci;\n  481  \n  482:   /* Throw away any unused bits remaining in bit buffer; */\n  483    /* include any full bytes in next_marker's count of discarded bytes */\n  484    cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\jpeg\\libjpeg\\jdphuff.c:\n  238    int ci;\n  239  \n  240:   /* Throw away any unused bits remaining in bit buffer; */\n  241    /* include any full bytes in next_marker's count of discarded bytes */\n  242    cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\jpipkak\\jpipkakdataset.cpp:\n  103          if( end_of_message && m_eErrClass == CE_Failure )\n  104          {\n  105:             throw new JP2KAKException();\n  106          }\n  107      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\kea\\libkea_headers.h:\n   42  #ifdef _MSC_VER\n   43  #pragma warning( push )\n   44: #pragma warning( disable : 4290 )  /* C++ exception specification ignored except to indicate a function is not __declspec(nothrow)*/\n   45  #endif\n   46  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\mrf\\BitMask2D.h:\n   84          // Is_Same<T, unsigned short>::type b;\n   85          // if (!(a.value || b.value))\n   86:         //   throw std::out_of_range(\"Only bitmap units of unsigned 16 and 64 bits work\");\n   87  \n   88          // Precalculate row size in storage units, for speed\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\mrf\\JPEG_band.cpp:\n  566      // Gray and RGB for example\n  567      // This also means that a RGB MRF can be read as grayscale and vice versa\n  568:     // If libJPEG can't convert it will throw an error\n  569      //\n  570      if (nbands == 3 && cinfo.num_components != nbands)\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\mrf\\marfa_dataset.cpp:\n  283      memcpy( panOverviewListNew, panOverviewList, sizeof(int) * nOverviews );\n  284  \n  285:     try {  // Throw an error code, to make sure memory gets freed properly\n  286          // Modify the metadata file if it doesn't already have the Rset model set\n  287          if (0.0 == scale) {\n  ...\n  292                      CPLError(CE_Failure, CPLE_AppDefined,\n  293                          \"MRF:IBuildOverviews, Overviews not implemented for model %s\", model);\n  294:                     throw CE_Failure;\n  295                  }\n  296  \n  ...\n  302                      (EQUALN(\"Avg\", pszResampling, 3) || EQUALN(\"Nnb\", pszResampling, 3))) {\n  303                      CPLError(CE_Failure, CPLE_IllegalArg, \"MRF internal resampling only works for a scale factor of two\");\n  304:                     throw CE_Failure;\n  305                  }\n  306  \n  ...\n  310                  if (!CheckFileSize(current.idxfname, idxSize, GA_Update)) {\n  311                      CPLError(CE_Failure, CPLE_AppDefined, \"MRF: Can't extend index file\");\n  312:                     throw CE_Failure;\n  313                  }\n  314  \n  ...\n  319                  if (!WriteConfig(config)) {\n  320                      CPLError(CE_Failure, CPLE_AppDefined, \"MRF: Can't rewrite the metadata file\");\n  321:                     throw CE_Failure;\n  322                  }\n  323                  CPLDestroyXMLNode(config);\n  ...\n  327                  if (config)\n  328                      CPLDestroyXMLNode(config);\n  329:                 throw; // Rethrow\n  330              }\n  331  \n  ...\n  361              (EQUALN(\"Avg\", pszResampling, 3) || EQUALN(\"Nnb\", pszResampling, 3))) {\n  362              CPLError(CE_Failure, CPLE_IllegalArg, \"MRF internal resampling only works for a scale factor of two\");\n  363:             throw CE_Failure;\n  364          }\n  365  \n  ...\n  397                      0, sampling);\n  398                  if (eErr == CE_Failure)\n  399:                     throw eErr;\n  400              }\n  401              else\n  ...\n 1600  \n 1601          if (poDS == nullptr || poDS->bCrystalized)\n 1602:             throw CPLString().Printf(\"Can't create %s\",pszFilename);\n 1603  \n 1604          img = poDS->current; // Deal with the current one here\n ....\n 1896      const char *val = opt.FetchNameValue(\"COMPRESS\");\n 1897      if (val && IL_ERR_COMP == (img.comp = CompToken(val)))\n 1898:         throw CPLString(\"GDAL MRF: Error setting compression\");\n 1899  \n 1900      val = opt.FetchNameValue(\"INTERLEAVE\");\n 1901      if (val && IL_ERR_ORD == (img.order = OrderToken(val)))\n 1902:         throw CPLString(\"GDAL MRF: Error setting interleave\");\n 1903  \n 1904      val = opt.FetchNameValue(\"QUALITY\");\n ....\n 2074      CPLDestroyXMLNode(config);\n 2075      if (!nocopy && (!IdxFP() || !DataFP()))\n 2076:         throw CPLString().Printf(\"MRF: %s\", strerror(errno));\n 2077      bCrystalized = TRUE;\n 2078  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\msg\\msgdataset.cpp:\n  555            }\n  556  \n  557:           unsigned char* ibuf = new (std::nothrow) unsigned char[nb_ibytes];\n  558            if (ibuf == nullptr )\n  559            {\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\gdal_edb.cpp:\n   36  using PCIDSK::EDBFile;\n   37  using PCIDSK::eChanType;\n   38: using PCIDSK::ThrowPCIDSKException;\n   39  using PCIDSK::CHN_8U;\n   40  using PCIDSK::CHN_16S;\n   ..\n   90  \n   91      if( poDS == nullptr )\n   92:         ThrowPCIDSKException( \"%s\", CPLGetLastErrorMsg() );\n   93  \n   94      return new GDAL_EDBFile( poDS );\n   ..\n  211      if( GetType(channel) == CHN_UNKNOWN )\n  212      {\n  213:         ThrowPCIDSKException(\"%s channel type not supported for PCIDSK access.\",\n  214                               GDALGetDataTypeName(poBand->GetRasterDataType()) );\n  215      }\n  ...\n  246      if( eErr != CE_None )\n  247      {\n  248:         ThrowPCIDSKException( \"%s\", CPLGetLastErrorMsg() );\n  249      }\n  250  \n  ...\n  263      if( GetType(channel) == CHN_UNKNOWN )\n  264      {\n  265:         ThrowPCIDSKException(\"%s channel type not supported for PCIDSK access.\",\n  266                               GDALGetDataTypeName(poBand->GetRasterDataType()) );\n  267      }\n  ...\n  300      if( eErr != CE_None )\n  301      {\n  302:         ThrowPCIDSKException( \"%s\", CPLGetLastErrorMsg() );\n  303      }\n  304  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\pcidskdataset2.cpp:\n  815  /************************************************************************/\n  816  \n  817: // FIXME? is an exception can really be thrown in the destructor, then it is very dangerous !\n  818  #ifdef _MSC_VER\n  819  #pragma warning( push )\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\vsi_pcidsk_io.cpp:\n   34  using PCIDSK::IOInterfaces;\n   35  using PCIDSK::PCIDSKInterfaces;\n   36: using PCIDSK::ThrowPCIDSKException;\n   37  using PCIDSK::uint64;\n   38  \n   ..\n   82  \n   83      if( fp == nullptr )\n   84:         ThrowPCIDSKException( \"Failed to open %s: %s\",\n   85                                filename.c_str(), LastError() );\n   86  \n   ..\n  101  \n  102      if( result == static_cast<uint64>( -1 ) )\n  103:         ThrowPCIDSKException( \"Seek(%d,%d): %s\",\n  104                                static_cast<int>( offset ), whence,\n  105                                LastError() );\n  ...\n  135  \n  136      if( errno != 0 && result == 0 && nmemb != 0 )\n  137:         ThrowPCIDSKException( \"Read(%d): %s\",\n  138                                static_cast<int>( size * nmemb ),\n  139                                LastError() );\n  ...\n  158  \n  159      if( errno != 0 && result == 0 && nmemb != 0 )\n  160:         ThrowPCIDSKException( \"Write(%d): %s\",\n  161                                static_cast<int>( size * nmemb ),\n  162                                LastError() );\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\pcidsk_exception.h:\n    1  /******************************************************************************\n    2   *\n    3:  * Purpose:  Declaration of the PCIDSKException class. All exceptions thrown\n    4   *           by the PCIDSK library will be of this type.\n    5   * \n    .\n   43      class PCIDSKException : public std::exception\n   44      {\n   45:         friend void PCIDSK_DLL ThrowPCIDSKException( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);\n   46:         friend int PCIDSK_DLL ThrowPCIDSKException( int ret_unused, const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(2,3);\n   47:         friend void* PCIDSK_DLL ThrowPCIDSKExceptionPtr( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);\n   48          PCIDSKException() {}\n   49      public:\n   50          PCIDSKException(const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(2,3);\n   51:         virtual ~PCIDSKException() throw();\n   52  \n   53          void vPrintf( const char *fmt, std::va_list list );\n   54:         virtual const char *what() const throw() override { return message.c_str(); }\n   55      private:\n   56          std::string   message;\n   57      };\n   58  \n   59:     void PCIDSK_DLL ThrowPCIDSKException( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);\n   60:     int PCIDSK_DLL ThrowPCIDSKException( int ret_unused, const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(2,3);\n   61:     void* PCIDSK_DLL ThrowPCIDSKExceptionPtr( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);\n   62  \n   63  } // end namespace PCIDSK\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\pcidsk_vectorsegment.h:\n  247  \\brief Delete a shape.\n  248  \n  249: An exception is thrown if the shape does not exist.\n  250  \n  251  @param id the shapeid to delete.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\channel\\cbandinterleavedchannel.cpp:\n  135          || yoff < 0 || yoff + ysize > GetBlockHeight() )\n  136      {\n  137:         return ThrowPCIDSKException( 0,\n  138              \"Invalid window in ReadBlock(): xoff=%d,yoff=%d,xsize=%d,ysize=%d\",\n  139              xoff, yoff, xsize, ysize );\n  ...\n  148      if( xsize > 1 && pixel_offset > static_cast<uint64>(INT_MAX / (xsize - 1)) )\n  149      {\n  150:         return ThrowPCIDSKException( 0, \"Int overfow in ReadBlock() \");\n  151      }\n  152      if( pixel_offset*(xsize-1) > static_cast<uint64>(INT_MAX - pixel_size) )\n  153      {\n  154:         return ThrowPCIDSKException( 0, \"Int overfow in ReadBlock() \");\n  155      }\n  156      int    window_size = (int) (pixel_offset*(xsize-1) + pixel_size);\n  ...\n  219  \n  220      if( !file->GetUpdatable() )\n  221:         return ThrowPCIDSKException(0, \"File not open for update in WriteBlock()\" );\n  222  \n  223      InvalidateOverviews();\n  ...\n  330  {\n  331      if( ih_offset == 0 )\n  332:         return ThrowPCIDSKException( \"No Image Header available for this channel.\" );\n  333  \n  334  /* -------------------------------------------------------------------- */\n  ...\n  467          if (seg_num == 0)\n  468          {\n  469:             ThrowPCIDSKException(\"Unable to find link segment. Link name: %s\",\n  470                                    filename_in.c_str());\n  471              return \"\";\n  ...\n  476          if (link_seg == nullptr)\n  477          {\n  478:             ThrowPCIDSKException(\"Failed to get Link Information Segment.\");\n  479              return \"\";\n  480          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\channel\\cexternalchannel.cpp:\n   84      if( exoff < 0 || eyoff < 0 || exsize < 0 || eysize < 0 )\n   85      {\n   86:         ThrowPCIDSKException(\"Invalid data window parameters for CExternalChannel\");\n   87      }\n   88  \n   ..\n  123      if( echannel < 0 || echannel > db->GetChannels() )\n  124      {\n  125:         ThrowPCIDSKException( 0,\n  126              \"Invalid channel number: %d\", echannel );\n  127      }\n  ...\n  192          || yoff < 0 || yoff + ysize > GetBlockHeight() )\n  193      {\n  194:         return ThrowPCIDSKException( 0,\n  195              \"Invalid window in ReadBlock(): xoff=%d,yoff=%d,xsize=%d,ysize=%d\",\n  196              xoff, yoff, xsize, ysize );\n  ...\n  224  \n  225      if( temp_buffer == nullptr )\n  226:         return ThrowPCIDSKException(0, \"Failed to allocate temporary block buffer.\" );\n  227  \n  228      dst_blockx = block_index % blocks_per_row;\n  ...\n  284                   ablock_y * src_blocks_per_row > INT_MAX - ablock_x) )\n  285              {\n  286:                 ThrowPCIDSKException(0, \"Integer overflow.\" );\n  287              }\n  288              db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, \n  ...\n  417      {\n  418          free( temp_buffer );\n  419:         throw;\n  420      }\n  421      \n  ...\n  435  \n  436      if( !file->GetUpdatable() || !writable )\n  437:         return ThrowPCIDSKException(0, \"File not open for update in WriteBlock()\" );\n  438  \n  439  /* -------------------------------------------------------------------- */\n  ...\n  463  \n  464      if( temp_buffer == nullptr )\n  465:         return ThrowPCIDSKException(0, \"Failed to allocate temporary block buffer.\" );\n  466  \n  467      dst_blockx = block_index % blocks_per_row;\n  ...\n  697  {\n  698      if( ih_offset == 0 )\n  699:         return ThrowPCIDSKException( \"No Image Header available for this channel.\" );\n  700  \n  701  /* -------------------------------------------------------------------- */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\channel\\cpcidskchannel.cpp:\n  222  \n  223      if( overview_index < 0 || overview_index >= (int) overview_infos.size() )\n  224:         return (PCIDSKChannel*)ThrowPCIDSKExceptionPtr( \"Non existent overview (%d) requested.\", \n  225                                overview_index );\n  226  \n  ...\n  253  \n  254      if( overview_index < 0 || overview_index >= (int) overview_infos.size() )\n  255:         return ThrowPCIDSKException(0, \"Non existent overview (%d) requested.\", \n  256                                overview_index ) != 0;\n  257  \n  ...\n  275      if( overview_index < 0 || overview_index >= (int) overview_infos.size() )\n  276      {\n  277:         ThrowPCIDSKException( \"Non existent overview (%d) requested.\", \n  278                                overview_index );\n  279          return \"\";\n  ...\n  300  \n  301      if( overview_index < 0 || overview_index >= (int) overview_infos.size() )\n  302:         return ThrowPCIDSKException( \"Non existent overview (%d) requested.\", \n  303                                overview_index );\n  304  \n  ...\n  381  {\n  382      if( ih_offset == 0 )\n  383:         return ThrowPCIDSKException( \"Description cannot be set on overviews.\" );\n  384          \n  385      PCIDSKBuffer ih_1(64);\n  ...\n  435  {\n  436      if( ih_offset == 0 )\n  437:         return ThrowPCIDSKException( \"Attempt to update history on a raster that is not\\na conventional band with an image header.\" );\n  438  \n  439      PCIDSKBuffer image_header(1024);\n  ...\n  513                                    CPL_UNUSED bool little_endian )\n  514  {\n  515:     return ThrowPCIDSKException( \"Attempt to SetChanInfo() on a channel that is not FILE interleaved.\" );\n  516  }\n  517  \n  ...\n  543                                     CPL_UNUSED int eysize )\n  544  {\n  545:     return ThrowPCIDSKException( \"Attempt to SetEChanInfo() on a channel that is not FILE interleaved.\" );\n  546  }\n  547  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\channel\\cpixelinterleavedchannel.cpp:\n   89          || win_yoff < 0 || win_yoff + win_ysize > GetBlockHeight() )\n   90      {\n   91:         return ThrowPCIDSKException(0, \n   92              \"Invalid window in ReadBloc(): win_xoff=%d,win_yoff=%d,xsize=%d,ysize=%d\",\n   93              win_xoff, win_yoff, win_xsize, win_ysize );\n   ..\n  149          }\n  150          else\n  151:             return ThrowPCIDSKException(0, \"Unsupported pixel type...\" );\n  152      }\n  153      \n  ...\n  181  {\n  182      if( !file->GetUpdatable() )\n  183:         return ThrowPCIDSKException(0, \"File not open for update in WriteBlock()\" );\n  184  \n  185      InvalidateOverviews();\n  ...\n  249          }\n  250          else\n  251:             return ThrowPCIDSKException(0, \"Unsupported pixel type...\" );\n  252      }\n  253      \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\channel\\ctiledchannel.cpp:\n  122  \n  123      if( bmap == nullptr )\n  124:         return ThrowPCIDSKException( \"Unable to find SysBMDir segment.\" );\n  125  \n  126      vfile = bmap->GetVirtualFile( image );\n  ...\n  145      if (pixel_type == CHN_UNKNOWN)\n  146      {\n  147:         return ThrowPCIDSKException( \"Unknown channel type: %s\", \n  148                                data_type.c_str() );\n  149      }\n  150      if( block_width <= 0 || block_height <= 0 )\n  151      {\n  152:         return ThrowPCIDSKException( \"Invalid blocksize: %d x %d\", \n  153                                block_width, block_height );\n  154      }\n  ...\n  367          || yoff < 0 || yoff + ysize > GetBlockHeight() )\n  368      {\n  369:         return ThrowPCIDSKException( 0,\n  370              \"Invalid window in ReadBloc(): xoff=%d,yoff=%d,xsize=%d,ysize=%d\",\n  371              xoff, yoff, xsize, ysize );\n  ...\n  374      if( block_index < 0 || block_index >= tile_count )\n  375      {\n  376:         return ThrowPCIDSKException( 0, \"Requested non-existent block (%d)\", \n  377                                block_index );\n  378      }\n  ...\n  455      else\n  456      {\n  457:         return ThrowPCIDSKException( 0,\n  458              \"Unable to read tile of unsupported compression type: %s\",\n  459              compression.c_str() );\n  ...\n  523  {\n  524      if( !file->GetUpdatable() )\n  525:         return ThrowPCIDSKException(0, \"File not open for update in WriteBlock()\" );\n  526  \n  527      InvalidateOverviews();\n  ...\n  532      if( block_index < 0 || block_index >= tile_count )\n  533      {\n  534:         return ThrowPCIDSKException( 0, \"Requested non-existent block (%d)\", \n  535                                block_index );\n  536      }\n  ...\n  603      else\n  604      {\n  605:         return ThrowPCIDSKException( 0,\n  606              \"Unable to write tile of unsupported compression type: %s\",\n  607              compression.c_str() );\n  ...\n  728              if( dst_offset + count * pixel_size > oDecompressedData.buffer_size)\n  729              {\n  730:                 return ThrowPCIDSKException( \"RLE compressed tile corrupt, overrun avoided.\" );\n  731              }\n  732  \n  ...\n  749                  || src_offset + count*pixel_size > oCompressedData.buffer_size)\n  750              {\n  751:                 return ThrowPCIDSKException( \"RLE compressed tile corrupt, overrun avoided.\" );\n  752              }\n  753  \n  ...\n  766          || dst_offset != oDecompressedData.buffer_size ) \n  767      {\n  768:         return ThrowPCIDSKException( \"RLE compressed tile corrupt, result incomplete.\" );\n  769      }\n  770  }\n  ...\n  896  {\n  897      if( file->GetInterfaces()->JPEGDecompressBlock == nullptr )\n  898:         return ThrowPCIDSKException( \"JPEG decompression not enabled in the PCIDSKInterfaces of this build.\" );\n  899  \n  900      file->GetInterfaces()->JPEGDecompressBlock( \n  ...\n  912  {\n  913      if( file->GetInterfaces()->JPEGCompressBlock == nullptr )\n  914:         return ThrowPCIDSKException( \"JPEG compression not enabled in the PCIDSKInterfaces of this build.\" );\n  915  \n  916  /* -------------------------------------------------------------------- */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\clinksegment.cpp:\n  116      else\n  117      {\n  118:         return ThrowPCIDSKException(\"The size of the path cannot be\"\n  119                                \" bigger than 504 characters.\");\n  120      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\cpcidskfile.cpp:\n  232  {\n  233      if( band < 1 || band > channel_count )\n  234:         return (PCIDSKChannel*)ThrowPCIDSKExceptionPtr( \"Out of range band (%d) requested.\", \n  235                                band );\n  236  \n  ...\n  405  \n  406  {\n  407:     PCIDSK::ThrowPCIDSKException( \"Objects list access not implemented yet.\" );\n  408  \n  409      std::vector<PCIDSK::PCIDSKSegment *> list;\n  ...\n  437          if( bTooBig )\n  438          {\n  439:             ThrowPCIDSKException( \n  440                  \"File too short to read \" PCIDSK_FRMT_UINT64 \" bytes \"\n  441                  \"of scanline.\", nBytesToRead );\n  ...\n  482      if( segment_block_count < 0 ||\n  483          segment_block_count > std::numeric_limits<int>::max() / 512 )\n  484:         return ThrowPCIDSKException( \"Invalid segment_block_count: %d\",\n  485                                       segment_block_count );\n  486  \n  ...\n  528          if( block_size != static_cast<size_t>(block_size) )\n  529          {\n  530:              return ThrowPCIDSKException( \n  531                  \"Allocating \" PCIDSK_FRMT_UINT64 \" bytes for scanline \"\n  532                  \"buffer failed.\", block_size );\n  ...\n  537          if( last_block_data == nullptr )\n  538          {\n  539:              return ThrowPCIDSKException( \n  540                  \"Allocating \" PCIDSK_FRMT_UINT64 \" bytes for scanline \"\n  541                  \"buffer failed.\", block_size );\n  ...\n  579          {\n  580              if( !( count_c32r == 0 && count_c16u == 0 && count_c16s == 0 ) )\n  581:                 return ThrowPCIDSKException(\"Assertion 'count_c32r == 0 && count_c16u == 0 && count_c16s == 0' failed\");\n  582  \n  583              if( channelnum <= count_8u )\n  ...\n  634  \n  635          else\n  636:             return ThrowPCIDSKException( \"Unsupported interleaving:%s\", \n  637                                         interleaving.c_str() );\n  638  \n  ...\n  652      interfaces.io->Seek( io_handle, offset, SEEK_SET );\n  653      if( interfaces.io->Read( buffer, 1, size, io_handle ) != size )\n  654:         return ThrowPCIDSKException( \"PCIDSKFile:Failed to read %u bytes at %u.\", \n  655                                     (unsigned int) size, (unsigned int) offset );\n  656  }\n  ...\n  664  {\n  665      if( !GetUpdatable() )\n  666:         throw PCIDSKException( \"File not open for update in WriteToFile()\" );\n  667  \n  668      MutexHolder oHolder( io_mutex );\n  ...\n  670      interfaces.io->Seek( io_handle, offset, SEEK_SET );\n  671      if( interfaces.io->Write( buffer, 1, size, io_handle ) != size )\n  672:         return ThrowPCIDSKException( \"PCIDSKFile:Failed to write %u bytes at %u.\",\n  673                                     (unsigned int) size, (unsigned int) offset );\n  674  }\n  ...\n  683  {\n  684      if( last_block_data == nullptr )\n  685:         return ThrowPCIDSKExceptionPtr( \"ReadAndLockBlock() called on a file that is not pixel interleaved.\" );\n  686  \n  687  /* -------------------------------------------------------------------- */\n  ...\n  696      if( win_xoff < 0 || win_xoff+win_xsize > GetWidth() )\n  697      {\n  698:         return ThrowPCIDSKExceptionPtr( \"CPCIDSKFile::ReadAndLockBlock(): Illegal window - xoff=%d, xsize=%d\", \n  699                                     win_xoff, win_xsize );\n  700      }\n  ...\n  751  {\n  752      if( !GetUpdatable() )\n  753:         return ThrowPCIDSKException( \"File not open for update in WriteBlock()\" );\n  754  \n  755      if( last_block_data == nullptr )\n  756:         return ThrowPCIDSKException( \"WriteBlock() called on a file that is not pixel interleaved.\" );\n  757  \n  758      WriteToFile( buffer,\n  ...\n  830  \n  831      if( new_file.file == nullptr )\n  832:         return ThrowPCIDSKException( 0, \"Unable to open file '%s'.\", \n  833                                filename.c_str() ) != 0;\n  834  \n  ...\n  899          \n  900      if( new_file.io_handle == nullptr )\n  901:         return ThrowPCIDSKException( \"Unable to open file '%s'.\", \n  902                                filename.c_str() );\n  903  \n  ...\n  929  \n  930      if( poSeg == nullptr )\n  931:         return ThrowPCIDSKException( \"DeleteSegment(%d) failed, segment does not exist.\", segment );\n  932  \n  933  /* -------------------------------------------------------------------- */\n  ...\n 1072      \n 1073      if( segment > segment_count )\n 1074:         return ThrowPCIDSKException(0, \"All %d segment pointers in use.\", segment_count);\n 1075  \n 1076  /* -------------------------------------------------------------------- */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\libjpeg_io.cpp:\n   64  \n   65      cinfo->err->format_message(cinfo, buf);\n   66:     return ThrowPCIDSKException( \"%s\", buf );\n   67  }\n   68  \n   ..\n  111          sJCompInfo.image_height != (unsigned int)ysize)\n  112      {\n  113:         return ThrowPCIDSKException(\"Tile Size wrong in LibJPEG_DecompressTile(), got %dx%d, expected %dx%d.\",\n  114                               sJCompInfo.image_width,\n  115                               sJCompInfo.image_height,\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\metadataset_p.cpp:\n  131      if( file == nullptr )\n  132      {\n  133:         return ThrowPCIDSKException( \"Attempt to set metadata on an unassociated MetadataSet, likely an overview channel.\" );\n  134      }\n  135  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidsk_utils.cpp:\n  164          break;\n  165      default:\n  166:         return ThrowPCIDSKException(\"Unknown data type passed to SwapPixels.\"\n  167              \"This is a software bug. Please contact your vendor.\");\n  168      }\n  ...\n  237      }\n  238      else\n  239:         return ThrowPCIDSKException( \"Unsupported data size in SwapData()\" );\n  240  }\n  241  \n  ...\n  307              && compression != \"QUADTREE\" )\n  308          {\n  309:             return ThrowPCIDSKException( \"Unsupported tile compression scheme '%s' requested.\",\n  310                                    compression.c_str() );\n  311          }\n  ...\n  545      {\n  546          void *hFile = io_interfaces->Open( result, \"r\" );\n  547:         // should throw an exception on failure.\n  548          io_interfaces->Close( hFile );\n  549          return result;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidskbuffer.cpp:\n   89          buffer = nullptr;\n   90          buffer_size = 0;\n   91:         throw PCIDSKException( \"Invalid buffer size: %d\", size );\n   92      }\n   93      buffer_size = size;\n   ..\n   99          buffer = nullptr;\n  100          buffer_size = 0;\n  101:         throw PCIDSKException( \"Out of memory allocating %d byte PCIDSKBuffer.\",\n  102                                 size );\n  103      }\n  ...\n  126  {\n  127      if( offset + size > buffer_size )\n  128:         return ThrowPCIDSKException( \"Get() past end of PCIDSKBuffer.\" );\n  129  \n  130      if( unpad )\n  ...\n  147  \n  148      if( offset + size > buffer_size )\n  149:         return ThrowPCIDSKException(0, \"GetUInt64() past end of PCIDSKBuffer.\" );\n  150  \n  151      value_str.assign( buffer + offset, size );\n  ...\n  164  \n  165      if( offset + size > buffer_size )\n  166:         return ThrowPCIDSKException(0, \"GetInt() past end of PCIDSKBuffer.\" );\n  167  \n  168      value_str.assign( buffer + offset, size );\n  ...\n  181  \n  182      if( offset + size > buffer_size )\n  183:         return ThrowPCIDSKException(0, \"GetDouble() past end of PCIDSKBuffer.\" );\n  184  \n  185      value_str.assign( buffer + offset, size );\n  ...\n  216  {\n  217      if( offset + size > buffer_size )\n  218:         return ThrowPCIDSKException( \"Put() past end of PCIDSKBuffer.\" );\n  219  \n  220      int v_size = static_cast<int>(strlen(value));\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidskcreate.cpp:\n   70          channel_count < 0 || channel_count > 99999999 )\n   71      {\n   72:         return (PCIDSKFile*)ThrowPCIDSKExceptionPtr(\n   73              \"PCIDSK::Create(): invalid dimensions / band count.\" );\n   74      }\n   ..\n  125      }\n  126      else\n  127:         return (PCIDSKFile*)ThrowPCIDSKExceptionPtr( \"PCIDSK::Create() options '%s' not recognised.\",\n  128                                options.c_str() );\n  129  #if 0\n  ...\n  151      if( !regular && strcmp(interleaving,\"FILE\") != 0 )\n  152      {\n  153:         return (PCIDSKFile*)ThrowPCIDSKExceptionPtr( \n  154             \"Requested mixture of band types not supported for interleaving=%s.\",\n  155             interleaving );\n  ...\n  444      {\n  445          interfaces->io->Close( io_handle );\n  446:         throw;\n  447      }\n  448  \n  ...\n  544      {\n  545          delete file;\n  546:         throw;\n  547      }\n  548  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidskexception.cpp:\n   46  \\brief Generic SDK Exception\n   47  \n   48: The PCIDSKException class is used for all errors thrown by the PCIDSK\n   49  library.  It includes a formatted message and is derived from std::exception.\n   50: The PCIDSK library throws all exceptions as pointers, and library exceptions \n   51  should be caught like this:\n   52  \n   ..\n  108   */\n  109  \n  110: PCIDSKException::~PCIDSKException() throw()\n  111  \n  112  {\n  ...\n  207  \n  208  /**\n  209:  * \\fn const char *PCIDSKException::what() const throw();\n  210   *\n  211   * \\brief fetch exception message.\n  ...\n  221  \n  222  /**\n  223:  * \\brief throw a formatted exception.\n  224   *\n  225:  * This function throws a PCIDSK Exception by reference after formatting\n  226   * the message using the given printf style format and arguments.  This\n  227:  * function exists primarily so that throwing an exception can be done in\n  228:  * one line of code, instead of declaring an exception and then throwing it.\n  229   *\n  230   * @param fmt the printf style format (eg. \"Illegal value:%d\")\n  231   * @param ... additional arguments as required by the format string.\n  232   */\n  233: void PCIDSK::ThrowPCIDSKException( const char *fmt, ... )\n  234  \n  235  {\n  ...\n  241      va_end( args );\n  242  \n  243:     throw ex;\n  244  }\n  245  \n  ...\n  249  \n  250  \n  251: int PCIDSK::ThrowPCIDSKException( int /*ret_unused*/, const char *fmt, ... )\n  252  \n  253  {\n  ...\n  259      va_end( args );\n  260  \n  261:     throw ex;\n  262  }\n  263  \n  264: void* PCIDSK::ThrowPCIDSKExceptionPtr( const char *fmt, ... )\n  265  \n  266  {\n  ...\n  272      va_end( args );\n  273  \n  274:     throw ex;\n  275  }\n  276  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidskinterfaces.cpp:\n   90  (currently on CHN_8U is allowed). \n   91  \n   92: Errors should be thrown as exceptions.\n   93  \n   94  ***************************************************************************/\n   ..\n  110  actual number of bytes used.\n  111  \n  112: Errors should be thrown as exceptions.\n  113  \n  114  ***************************************************************************/\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\pcidskopen.cpp:\n   80      {\n   81          interfaces->io->Close( io_handle );\n   82:         return (PCIDSKFile*)ThrowPCIDSKExceptionPtr( \"File %s does not appear to be PCIDSK format.\",\n   83                                filename.c_str() );\n   84      }\n   ..\n  107      {\n  108          delete file;\n  109:         throw;\n  110      }\n  111  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\core\\sysvirtualfile.cpp:\n  118  {\n  119      if( requested_block < 0 )\n  120:         return (uint16)ThrowPCIDSKException(0, \"SysVirtualFile::GetBlockSegment(%d) - illegal request.\",\n  121                                requested_block );\n  122  \n  ...\n  139  {\n  140      if( requested_block < 0 )\n  141:         return ThrowPCIDSKException(0, \"SysVirtualFile::GetBlockIndexInSegment(%d) - illegal request.\",\n  142                                requested_block );\n  143  \n  ...\n  163  {\n  164      if( requested_block < 0 )\n  165:         return ThrowPCIDSKException( \"SysVirtualFile::SetBlockSegment(%d) - illegal request.\",\n  166                                requested_block );\n  167  \n  ...\n  337  /* -------------------------------------------------------------------- */\n  338      if( requested_block < 0 || requested_block >= blocks_loaded )\n  339:         return ThrowPCIDSKException( \"SysVirtualFile::LoadBlock(%d) - block out of range.\",\n  340                                requested_block );\n  341  \n  ...\n  352          file->GetSegment( GetBlockSegment( requested_block ) );\n  353      if( data_seg_obj == nullptr )\n  354:         return ThrowPCIDSKException( \"SysVirtualFile::LoadBlock(%d) - no segment found\",\n  355                                       requested_block );\n  356  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\port\\io_stdio.cpp:\n   89  \n   90      if( fp == nullptr )\n   91:         ThrowPCIDSKException( \"Failed to open %s: %s\", \n   92                                filename.c_str(), LastError() );\n   93  \n   ..\n  118  \n  119      if( result == (uint64) -1 )\n  120:         ThrowPCIDSKException( \"Seek(%d,%d): %s\", \n  121                                (int) offset, whence, \n  122                                LastError() );\n  ...\n  174  \n  175      if( errno != 0 && result == 0 && nmemb != 0 )\n  176:         ThrowPCIDSKException( \"Read(%d): %s\", \n  177                                (int) size * nmemb,\n  178                                LastError() );\n  ...\n  199  \n  200      if( errno != 0 && result == 0 && nmemb != 0 )\n  201:         ThrowPCIDSKException( \"Write(%d): %s\", \n  202                                (int) size * nmemb,\n  203                                LastError() );\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\port\\io_win32.cpp:\n   97      if( hFile == INVALID_HANDLE_VALUE )\n   98      {\n   99:         ThrowPCIDSKException( \"Open(%s,%s) failed:\\n%s\", \n  100                                filename.c_str(), access.c_str(), LastError() );\n  101      }\n  ...\n  164                  (GUInt32) nOffset, nMoveLow, dwMoveHigh );\n  165  #endif\n  166:         ThrowPCIDSKException( \"Seek(%d,%d): %s (%d)\", \n  167                                (int) offset, whence, \n  168                                LastError(), GetLastError() );\n  ...\n  227  \n  228      if( errno != 0 && result == 0 && nmemb != 0 )\n  229:         ThrowPCIDSKException( \"Read(%d): %s\", \n  230                                (int) size * nmemb,\n  231                                LastError() );\n  ...\n  261  \n  262      if( errno != 0 && result == 0 && nmemb != 0 )\n  263:         ThrowPCIDSKException( \"Write(%d): %s\", \n  264                                     (int) size * nmemb,\n  265                                     LastError() );\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\port\\win32_mutex.cpp:\n   94  \n   95      if( hr != 0 )\n   96:         PCIDSK::ThrowPCIDSKException( \"Failed to acquire mutex in 3600s.\" );\n   97  \n   98      return 1;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidsk_array.cpp:\n   86          oStream << \" stored in the segment.\";\n   87          std::string oMsg = oStream.str();\n   88:         return ThrowPCIDSKException(\"%s\", oMsg.c_str());\n   89      }\n   90      mnDimension = static_cast<unsigned char>(nDimension);\n   ..\n   99              oStream << \"Invalid size \" << nSize << \" for dimension \" << i+1;\n  100              std::string oMsg = oStream.str();\n  101:             return ThrowPCIDSKException(\"%s\", oMsg.c_str());\n  102          }\n  103          moSizes.push_back( nSize );\n  ...\n  203  /**\n  204   * This function set the dimension of the array. the dimension\n  205:  * must be in [1,8] or a pci::Exception is thrown.\n  206   *\n  207   * @param nDim number of dimension, should be in [1,8]\n  ...\n  211      if(nDim < 1 || nDim > 8)\n  212      {\n  213:         return ThrowPCIDSKException(\"An array cannot have a \"\n  214              \"dimension bigger than 8 or smaller than 1.\");\n  215      }\n  ...\n  231  /**\n  232   * Set the size of each dimension. If the size of the array is bigger\n  233:  * or smaller than GetDimensionCount(), then a pci::Exception is thrown\n  234:  * if one of the sizes is 0, then a pci::Exception is thrown.\n  235   *\n  236   * @param oSizes the size of each dimension \n  ...\n  240      if(oSizes.size() != GetDimensionCount())\n  241      {\n  242:         return ThrowPCIDSKException(\"You need to specify the sizes\"\n  243              \" for each dimension of the array\");\n  244      }\n  ...\n  248          if(oSizes[i] == 0)\n  249          {\n  250:             return ThrowPCIDSKException(\"You cannot define the size of a dimension to 0.\");\n  251          }\n  252      }\n  ...\n  285   *\n  286   * If the size of oArray doesn't match the sizes and dimensions\n  287:  * then a pci::Exception is thrown.\n  288   *\n  289   * @param oArray the array.\n  ...\n  299      if(nLength != oArray.size())\n  300      {\n  301:         return ThrowPCIDSKException(\"the size of this array doesn't match \"\n  302              \"the size specified in GetSizes(). See documentation for\"\n  303              \" more information.\");\n  ...\n  324   * the headers in the segment.\n  325   * the size of this vector should be equal to the size of the first dimension\n  326:  * returned by GetSize()[0]. If it is not the case, a pci::Exception is thrown.\n  327   *\n  328   * @param oHeaders the headers.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskads40model.cpp:\n   63          delete pimpl_;\n   64          pimpl_ = nullptr;\n   65:         throw;\n   66      }\n   67  }\n   ..\n   83      if( data_size - 1024 != 1 * 512 )\n   84      {\n   85:         return ThrowPCIDSKException(\"Wrong data_size in CPCIDSKADS40ModelSegment\");\n   86      }\n   87      \n   ..\n  102          return;\n  103          // Something has gone terribly wrong!\n  104:         /*throw PCIDSKException(\"A segment that was previously identified as an RFMODEL \"\n  105              \"segment does not contain the appropriate data. Found: [%s]\", \n  106              std::string(pimpl_->seg_data.buffer, 8).c_str());*/\n  ...\n  145      else\n  146      {\n  147:         return ThrowPCIDSKException(\"The size of the path cannot be\"\n  148                                \" bigger than 504 characters.\");\n  149      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskapmodel.cpp:\n  229  {\n  230      if (!filled_) {\n  231:         return ThrowPCIDSKException(0 , \"Failed to determine width from APModel.\");\n  232      }\n  233      return width_;\n  ...\n  237  {\n  238      if (!filled_) {\n  239:         return ThrowPCIDSKException(0, \"Failed to determine height from APModel.\");\n  240      }\n  241      return height_;\n  ...\n  245  {\n  246      if (!filled_) {\n  247:         return ThrowPCIDSKException(0, \"Failed to determine APModel downsample factor.\");\n  248      }\n  249      return downsample_;\n  ...\n  254  {\n  255      if (io_params_ == nullptr) {\n  256:         throw PCIDSKException(\"There was a failure in reading the APModel IO params.\");\n  257      }\n  258      return *io_params_;\n  ...\n  263  {\n  264      if (eo_params_ == nullptr) {\n  265:         throw PCIDSKException(\"There was a failure in reading the APModel EO params.\");\n  266      }\n  267      return *eo_params_;\n  ...\n  271  {\n  272      if (misc_params_ == nullptr) {\n  273:         throw PCIDSKException(\"There was a failure in reading the APModel camera params.\");\n  274      }\n  275      return *misc_params_;\n  ...\n  333          {\n  334              std::string magic(buf.buffer, 8);\n  335:             return ThrowPCIDSKException(\"Bad segment magic found. Found: [%s] expecting [APMODEL ]\",\n  336                  magic.c_str());\n  337          }\n  ...\n  506      // 7 blocks long.\n  507      if (data_size < (1024 + 7 * 512)) {\n  508:         return ThrowPCIDSKException(\"APMODEL segment is smaller than expected. A \"\n  509              \"segment of size %d was found\", static_cast<int>(data_size));\n  510      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskbitmap.cpp:\n  243      if( block_index < 0 || block_index >= GetBlockCount() )\n  244      {\n  245:         return ThrowPCIDSKException(0, \"Requested non-existent block (%d)\", \n  246                                block_index );\n  247      }\n  ...\n  258              || win_yoff < 0 || win_yoff + win_ysize > GetBlockHeight() )\n  259          {\n  260:             return ThrowPCIDSKException( 0,\n  261                  \"Invalid window in CPCIDSKBitmap::ReadBlock(): xoff=%d,yoff=%d,xsize=%d,ysize=%d\",\n  262                  win_xoff, win_yoff, win_xsize, win_ysize );\n  ...\n  265          wrk_buffer = (uint8 *) malloc((size_t) block_size);\n  266          if( wrk_buffer == nullptr )\n  267:             return ThrowPCIDSKException(0, \"Out of memory allocating %d bytes in CPCIDSKBitmap::ReadBlock()\", \n  268                                    (int) block_size );\n  269      }\n  ...\n  347  PCIDSKChannel *CPCIDSKBitmap::GetOverview( int i )\n  348  {\n  349:     return (PCIDSKChannel*) ThrowPCIDSKExceptionPtr(\"Non-existent overview %d requested on bitmap segment.\", i);\n  350  }\n  351  \n  ...\n  503                                   CPL_UNUSED bool little_endian )\n  504  {\n  505:     return ThrowPCIDSKException( \"Attempt to SetChanInfo() on a bitmap.\" );\n  506  }\n  507  \n  ...\n  529                                    CPL_UNUSED int exsize, CPL_UNUSED int eysize )\n  530  {\n  531:     return ThrowPCIDSKException( \"Attempt to SetEChanInfo() on a bitmap.\" );\n  532  }\n  533  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskephemerissegment.cpp:\n  376      if ( as == nullptr)\n  377      {\n  378:         return ThrowPCIDSKException(\"The AvhrrSeg is NULL.\");\n  379      }\n  380  \n  ...\n  729          l_segment->Type = OrbNone;\n  730      else\n  731:         return (EphemerisSeg_t*)ThrowPCIDSKExceptionPtr(\"Invalid Orbit type found: [%s]\", \n  732                                seg_data.Get(nPos,8));\n  733  \n  ...\n  789          if (nData != AttitudeSeg->NumberOfLine)\n  790          {\n  791:             return (EphemerisSeg_t*)ThrowPCIDSKExceptionPtr(\"Number of data line read (%d) \"\n  792                       \"does not matches with what is specified in \"\n  793                       \"the l_segment (%d).\\n\", nData, \n  ...\n  923          if (RadarSeg->NumberData != nData)\n  924          {\n  925:             return (EphemerisSeg_t*)ThrowPCIDSKExceptionPtr(\"Number \"\n  926                       \"of data lines read (%d) does not match with\"\n  927                       \"\\nwhat is specified in l_segment (%d).\\n\", nData, \n  ...\n  941      {\n  942          delete l_segment;\n  943:         throw;\n  944      }\n  945      return l_segment;\n  ...\n 1153      else\n 1154      {\n 1155:         return ThrowPCIDSKException(\"Invalid Orbit type.\"); \n 1156      }\n 1157  \n ....\n 1169          if (AttitudeSeg == nullptr)\n 1170          {\n 1171:             return ThrowPCIDSKException(\"The AttitudeSeg is NULL.\");\n 1172          }\n 1173  \n ....\n 1235          if (nData != AttitudeSeg->NumberOfLine)\n 1236          {\n 1237:             return ThrowPCIDSKException(\"Number of data line written\"\n 1238                      \" (%d) does not match with\\nwhat is specified \"\n 1239                      \" in the segment (%d).\\n\", \n ....\n 1254          if (RadarSeg == nullptr)\n 1255          {\n 1256:             return ThrowPCIDSKException(\"The RadarSeg is NULL.\");\n 1257          }\n 1258  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskgcp2segment.cpp:\n   64          delete pimpl_;\n   65          pimpl_ = nullptr;\n   66:         throw;\n   67      }\n   68  }\n   ..\n  100      \n  101      if (((data_size - 1024 - 512) / 512) != num_blocks) {\n  102:         //ThrowPCIDSKException(\"Calculated number of blocks (%d) does not match \"\n  103          //    \"the value encoded in the GCP2 segment (%d).\", ((data_size - 1024 - 512)/512), \n  104          //    num_blocks);\n  ...\n  117      pimpl_->num_proj = pimpl_->seg_data.GetInt(40, 8);\n  118      if (pimpl_->num_proj != 0) {\n  119:         return ThrowPCIDSKException(\"There are alternative projections contained in this \"\n  120              \"GCP2 segment. This functionality is not supported in libpcidsk.\");\n  121      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskgeoref.cpp:\n  111          \n  112          if( seg_data.GetInt(48,8) != 3 || seg_data.GetInt(56,8) != 3 )\n  113:             return ThrowPCIDSKException( \"Unexpected number of coefficients in POLYNOMIAL GEO segment.\" );\n  114  \n  115          a1   = seg_data.GetDouble(212+26*0,26);\n  ...\n  132          \n  133          if( seg_data.GetInt(48,8) != 3 || seg_data.GetInt(56,8) != 3 )\n  134:             return ThrowPCIDSKException( \"Unexpected number of coefficients in PROJECTION GEO segment.\" );\n  135  \n  136          a1   = seg_data.GetDouble(1980+26*0,26);\n  ...\n  161      else\n  162      {\n  163:         return ThrowPCIDSKException( \"Unexpected GEO segment type: %s\", \n  164                                seg_data.Get(0,16) );\n  165      }\n  ...\n  326  \n  327      if( parms.size() < 17 )\n  328:         return ThrowPCIDSKException( \"Did not get expected number of parameters in WriteParameters()\" );\n  329  \n  330      unsigned int i;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskrpcmodel.cpp:\n   99          delete pimpl_;\n  100          pimpl_ = nullptr;\n  101:         throw;\n  102      }\n  103  }\n  ...\n  119      if( data_size - 1024 != 7 * 512 )\n  120      {\n  121:         return ThrowPCIDSKException(\"Wrong data_size in CPCIDSKRPCModelSegment\");\n  122      }\n  123      \n  ...\n  150          return;\n  151          // Something has gone terribly wrong!\n  152:         /*throw PCIDSKException(\"A segment that was previously identified as an RFMODEL \"\n  153              \"segment does not contain the appropriate data. Found: [%s]\", \n  154              std::string(pimpl_->seg_data.buffer, 8).c_str());*/\n  ...\n  207  \n  208          if (pimpl_->num_coeffs * 22 > 512) {\n  209:             // this segment is malformed. Throw an exception.\n  210:             return ThrowPCIDSKException(\"RFMODEL segment coefficient count requires more \"\n  211                  \"than one block to store. There is an error in this segment. The \"\n  212                  \"number of coefficients according to the segment is %d.\", pimpl_->num_coeffs);\n  ...\n  254  \n  255          if (pimpl_->num_coeffs * 22 > 512) {\n  256:             // this segment is malformed. Throw an exception.\n  257:             return ThrowPCIDSKException(\"RFMODEL segment coefficient count requires more \"\n  258                  \"than one block to store. There is an error in this segment. The \"\n  259                  \"number of coefficients according to the segment is %d.\", pimpl_->num_coeffs);\n  ...\n  396  \n  397      if (pimpl_->num_coeffs * 22 > 512) {\n  398:         // this segment is malformed. Throw an exception.\n  399:         return ThrowPCIDSKException(\"RFMODEL segment coefficient count requires more \"\n  400              \"than one block to store. There is an error in this segment. The \"\n  401              \"number of coefficients according to the segment is %d.\", pimpl_->num_coeffs);\n  ...\n  505      if (xnum.size() != xdenom.size() || ynum.size() != ydenom.size() ||\n  506          xnum.size() != ynum.size() || xdenom.size() != ydenom.size()) {\n  507:         return ThrowPCIDSKException(\"All RPC coefficient vectors must be the \"\n  508              \"same size.\");\n  509      }\n  ...\n  580  {\n  581      if (xcoord.size() != 6 || ycoord.size() != 6) {\n  582:         return ThrowPCIDSKException(\"X and Y adjusted coordinates must have \"\n  583              \"length 6.\");\n  584      }\n  ...\n  640  {\n  641      if (geosys.size() > 16) {\n  642:         return ThrowPCIDSKException(\"GeoSys/MapUnits string must be no more than \"\n  643              \"16 characters to be valid.\");\n  644      }\n  ...\n  661  {\n  662      if (lines == 0 || pixels == 0) {\n  663:         return ThrowPCIDSKException(\"Nonsensical raster dimensions provided: %ux%u\",\n  664                                lines, pixels);\n  665      }\n  ...\n  673  {\n  674      if (downsample == 0) {\n  675:         return ThrowPCIDSKException(\"Invalid downsample factor provided: %u\", downsample);\n  676      }\n  677  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidsksegment.cpp:\n  167  {\n  168      if( offset+size+1024 > data_size )\n  169:         return ThrowPCIDSKException( \n  170              \"Attempt to read past end of segment %d (%u bytes at offset %u)\",\n  171              segment, (unsigned int) offset, (unsigned int) size );\n  ...\n  203          \n  204          if (poFile == nullptr) {\n  205:             return ThrowPCIDSKException(\"Attempt to dynamic_cast the file interface \"\n  206                  \"to a CPCIDSKFile failed. This is a programmer error, and should \"\n  207                  \"be reported to your software provider.\");\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidsktoutinmodel.cpp:\n  182          return nullptr;\n  183          // Something has gone terribly wrong!\n  184:         /*throw PCIDSKException(\"A segment that was previously \"\n  185              \"identified as an RFMODEL \"\n  186              \"segment does not contain the appropriate data. Found: [%s]\", \n  ...\n  314          if( SRITModel->nSensor == -999)\n  315          {\n  316:             return (SRITInfo_t*)ThrowPCIDSKExceptionPtr(\"Invalid Sensor : %s.\",\n  317                                  SRITModel->OrbitPtr->SatelliteSensor.c_str());\n  318          }\n  319          if( SRITModel->nModel == -999)\n  320          {\n  321:             return (SRITInfo_t*)ThrowPCIDSKExceptionPtr(\"Invalid Model from sensor number: %d.\",\n  322                                  SRITModel->nSensor);\n  323          }\n  ...\n  358      {\n  359          delete SRITModel;\n  360:         throw;\n  361      }\n  362  \n  ...\n  752      else\n  753      {\n  754:         return ThrowPCIDSKException(0, \"Invalid Sensor %s\",\n  755              OrbitPtr->SatelliteSensor.c_str());\n  756      }\n  ...\n  892  \n  893      default:\n  894:         return ThrowPCIDSKException(0, \"Invalid sensor type.\");\n  895          break;\n  896      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\cpcidskvectorsegment.cpp:\n  278            {\n  279                if( offset > std::numeric_limits<uint32>::max() - 8 )\n  280:                     return ThrowPCIDSKException(0, \"Invalid offset = %u\", offset);\n  281                memcpy( &(value[0]), GetData(section,offset+4,nullptr,4*count), 4*count );\n  282                if( needs_swap )\n  ...\n  289  \n  290        default:\n  291:         return ThrowPCIDSKException(0, \"Unhandled field type %d\", field_type);\n  292      }\n  293  }\n  ...\n  445      else\n  446      {\n  447:         return (char*)ThrowPCIDSKExceptionPtr(\"Unexpected case\");\n  448      }\n  449      \n  450      if( offset > std::numeric_limits<uint32>::max() - static_cast<uint32>(min_bytes) )\n  451:         return (char*)ThrowPCIDSKExceptionPtr(\"Invalid offset : %u\", offset);\n  452  \n  453  /* -------------------------------------------------------------------- */\n  ...\n  469          // If the request goes beyond the end of the file, and we are \n  470          // in update mode, grow the segment by writing at the end of\n  471:         // the requested section.  This will throw an exception if we\n  472          // are unable to grow the file. \n  473          if( section != sec_raw\n  ...\n  542      if(  block_count + block_offset > (int) block_map->size() )\n  543      {\n  544:         return ThrowPCIDSKException(\"Assertion failed: block_count(=%d) + block_offset(=%d) <= block_map->size()(=%d)\",\n  545                                      block_count, block_offset, (int) block_map->size() );\n  546      }\n  ...\n  591      else\n  592      {\n  593:         return ThrowPCIDSKException(\"Unexpected case\");\n  594      }\n  595  \n  ...\n  794      PCIDSKBuffer wrk_index;\n  795      if( entries_to_load < 0 || entries_to_load > std::numeric_limits<int>::max() / 12 )\n  796:         return ThrowPCIDSKException(\"Invalid entries_to_load = %d\", entries_to_load);\n  797      wrk_index.SetSize( entries_to_load * 12 );\n  798      \n  ...\n  988  \n  989      if( shape_index == -1 )\n  990:         return ThrowPCIDSKException( \"Attempt to call GetVertices() on non-existing shape id '%d'.\",\n  991                                (int) shape_id );\n  992  \n  ...\n 1003  \n 1004      if( vert_off > std::numeric_limits<uint32>::max() - 4 )\n 1005:         return ThrowPCIDSKException( \"Invalid vert_off = %u\", vert_off);\n 1006      memcpy( &vertex_count, GetData( sec_vert, vert_off+4, nullptr, 4 ), 4 );\n 1007      if( needs_swap )\n ....\n 1014      catch( const std::bad_alloc& ex )\n 1015      {\n 1016:         return ThrowPCIDSKException(\"Out of memory allocating vertices(%u): %s\",\n 1017                                      vertex_count, ex.what());\n 1018      }\n ....\n 1023      {\n 1024          if( vert_off > std::numeric_limits<uint32>::max() - 8 )\n 1025:             return ThrowPCIDSKException( \"Invalid vert_off = %u\", vert_off);\n 1026          memcpy( &(vertices[0]), \n 1027                  GetData( sec_vert, vert_off+8, nullptr, vertex_count*24),\n ....\n 1116  \n 1117      if( shape_index == -1 )\n 1118:         return ThrowPCIDSKException( \"Attempt to call GetFields() on non-existing shape id '%d'.\",\n 1119                                (int) id );\n 1120  \n ....\n 1159      if( shape_count > 0 )\n 1160      {\n 1161:         return ThrowPCIDSKException( \"Support for adding fields in populated layers \"\n 1162                                \"has not yet been implemented.\" );\n 1163      }\n ....\n 1201      if( default_value->GetType() != type )\n 1202      {\n 1203:         return ThrowPCIDSKException( \"Attempt to add field with a default value of \"\n 1204                                \"a different type than the field.\" );\n 1205      }\n ....\n 1207      if( type == FieldTypeNone )\n 1208      {\n 1209:         return ThrowPCIDSKException( \"Creating fields of type None not supported.\" );\n 1210      }\n 1211  \n ....\n 1267          if( shapeid_map.count(id) > 0 )\n 1268          {\n 1269:             return ThrowPCIDSKException( 0, \"Attempt to create a shape with id '%d', but that already exists.\", id );\n 1270          }\n 1271      }\n ....\n 1301  \n 1302      if( shape_index == -1 )\n 1303:         return ThrowPCIDSKException( \"Attempt to call DeleteShape() on non-existing shape '%d'.\",\n 1304                                (int) id );\n 1305  \n ....\n 1365  \n 1366      if( shape_index == -1 )\n 1367:         return ThrowPCIDSKException( \"Attempt to call SetVertices() on non-existing shape '%d'.\",\n 1368                                (int) id );\n 1369  \n ....\n 1451  \n 1452      if( shape_index == -1 )\n 1453:         return ThrowPCIDSKException( \"Attempt to call SetFields() on non-existing shape id '%d'.\",\n 1454                                (int) id );\n 1455  \n 1456      if( list_in.size() > vh.field_names.size() )\n 1457      {\n 1458:         return ThrowPCIDSKException( \n 1459              \"Attempt to write %d fields to a layer with only %d fields.\", \n 1460              static_cast<int>(list_in.size()), static_cast<int>(vh.field_names.size()) );\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\sysblockmap.cpp:\n  141  \n  142      if( !STARTS_WITH(count_data.buffer, \"VERSION\") )\n  143:         return ThrowPCIDSKException( \"SysBlockMap::PartialLoad() - block map corrupt.\" );\n  144  \n  145      if( count_data.GetInt( 7, 3 ) != 1 )\n  146:         return ThrowPCIDSKException( \"SysBlockMap::PartialLoad() - unsupported version.\" );\n  147  \n  148  /* -------------------------------------------------------------------- */\n  ...\n  394  \n  395      if( image < 0 || image >= (int) virtual_files.size() )\n  396:         return (SysVirtualFile*)ThrowPCIDSKExceptionPtr( \"GetImageSysFile(%d): invalid image index\",\n  397                                image );\n  398  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\vecsegdataindex.cpp:\n  104      if( block_count > (std::numeric_limits<uint32>::max() - 8) /4 )\n  105      {\n  106:         throw PCIDSKException(\"Invalid block_count: %u\", block_count);\n  107      }\n  108  \n  ...\n  143          catch( const std::bad_alloc& ex )\n  144          {\n  145:             throw PCIDSKException(\"Out of memory allocating block_index(%u): %s\",\n  146                                    block_count, ex.what());\n  147          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\pcidsk\\sdk\\segment\\vecsegheader.cpp:\n  169      if( memcmp( vs->GetData( sec_raw, 0, nullptr, 24 ), magic, 24 ) != 0 )\n  170      {\n  171:         return ThrowPCIDSKException( \"Unexpected vector header values, possibly it is not a V6 vector segment?\" );\n  172      }\n  173      \n  ...\n  224          int field_type = work_value.GetValueInteger();\n  225          if( field_type < 0 || field_type > FieldTypeCountedInt )\n  226:             return ThrowPCIDSKException( \"Invalid field type: %d\", field_type );\n  227          field_types.push_back( static_cast<ShapeFieldType> (field_type) );\n  228          \n  ...\n  257          SwapData( &(vs->shape_count), 4, 1 );\n  258      if( vs->shape_count < 0 )\n  259:         return ThrowPCIDSKException( \"Invalid shape_count: %d\", vs->shape_count );\n  260  \n  261      next_off += 4;\n  ...\n  265          + static_cast<uint64>(vs->shape_count) * 12;\n  266      if( section_size > std::numeric_limits<uint32>::max() )\n  267:         return ThrowPCIDSKException( \"Invalid section_size\" );\n  268          \n  269      section_sizes[hsec_shape] = static_cast<uint32>(section_size);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\png\\libpng\\pngrtran.c:\n  186        if (histogram != NULL)\n  187        {\n  188:          /* This is easy enough, just throw out the least used colors.\n  189            * Perhaps not the best solution, but good enough.\n  190            */\n  ...\n  312            * don't always behave themselves with only a few colors\n  313            * as input.  So we will just find the closest two colors,\n  314:           * and throw out one of them (chosen somewhat randomly).\n  315            * [We don't understand this at all, so if someone wants to\n  316            *  work on improving it, be our guest - AED, GRP]\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\postgisraster\\postgisrasterdataset.cpp:\n   76          b) otherwise, do a full scan of metadata to build the sources\n   77  \n   78:      2) otherwise, throw a warning to the user and do a full scan of metadata is needed to build the sources\n   79  \n   80       For 1b) and 2), during a IRasterIO() query, determine which sources are needed and not cached.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\rasdaman\\rasdamandataset.cpp:\n  268    r_Set<r_Ref_Any> result_set = execute(queryString);\n  269    if (result_set.get_element_type_schema()->type_id() == r_Type::MARRAYTYPE) {\n  270:     // TODO: throw exception\n  271    }\n  272  \n  273    if (result_set.cardinality() != 1) {\n  274:     // TODO: throw exception\n  275    }\n  276  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\rda\\rdadataset.cpp:\n 1723      {\n 1724          //this shouldn't happen\n 1725:         throw new std::runtime_error(\"Udefined RDADatasetType\");\n 1726      }\n 1727      return retVal;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\rik\\rikdataset.cpp:\n  367          if( nBlockSize < 5 )\n  368          {\n  369:             throw \"Not enough bytes\";\n  370          }\n  371  \n  ...\n  374          if( LZW_MAX_BITS > 13 )\n  375          {\n  376:             throw \"Invalid LZW_MAX_BITS\";\n  377          }\n  378          const int LZW_BITS_PER_PIXEL = 8;\n  ...\n  413          if( code < 0 )\n  414          {\n  415:             throw \"Not enough bytes\";\n  416          }\n  417  \n  ...\n  429              if( code < 0 )\n  430              {\n  431:                 throw \"Not enough bytes\";\n  432              }\n  433  \n  ...\n  457                  if( code < 0 )\n  458                  {\n  459:                     throw \"Not enough bytes\";\n  460                  }\n  461  \n  462                  if( code > lastAdded )\n  463                  {\n  464:                     throw \"Clear Error\";\n  465                  }\n  466  \n  ...\n  487                  else if( code > lastAdded + 1 )\n  488                  {\n  489:                     throw \"Too high code\";\n  490                  }\n  491  \n  ...\n  504                  if( i == LZW_CODES || decodeCode >= LZW_NO_SUCH_CODE )\n  505                  {\n  506:                     throw \"Decode error\";\n  507                  }\n  508  \n  ...\n  525                      if( lastAdded >= 8192 )\n  526                      {\n  527:                         throw \"Decode error\";\n  528                      }\n  529                      prefix[lastAdded] = lastCode;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\sde\\frmt_sde.html:\n   13      allows the storage of raster data.  ArcSDE supports n-band imagery at many bit depths,\n   14      and the current implementation of the GDAL driver should support\n   15:     as many bands as you can throw at it.  ArcSDE supports the storage of\n   16      LZW, JP2K, and uncompressed data and transparently presents this through its\n   17      C API SDK.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\vrt\\vrtderivedrasterband.cpp:\n  762  \n  763      // This is a mess. traceback.format_exception/format_exception_only\n  764:     // sometimes throw exceptions themselves !\n  765      CPLString osPythonCode(\n  766          \"import traceback\\n\"\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\frmts\\wms\\minidriver_tiled_wms.cpp:\n  332  \n  333          if (m_base_url.empty())\n  334:             throw CPLOPrintf(\"%s ServerURL missing.\", SIG);\n  335  \n  336          CPLString tiledGroupName(CPLGetXMLValue(config, \"TiledGroupName\", \"\"));\n  337          if (tiledGroupName.empty())\n  338:             throw CPLOPrintf(\"%s TiledGroupName missing.\", SIG);\n  339  \n  340          // Change strings, key is an attribute, value is the value of the Change node\n  ...\n  344              CPLString name = CPLGetXMLValue(TG, \"key\", \"\");\n  345              if (name.empty())\n  346:                 throw CPLOPrintf(\"%s Change element needs a non-empty \\\"key\\\" attribute\", SIG);\n  347              substs = CSLSetNameValue(substs, name, CPLGetXMLValue(TG, \"\", \"\"));\n  348              TG = SearchXMLSiblings(TG, \"Change\");\n  ...\n  366  \n  367              if (psconfig == nullptr)\n  368:                 throw CPLOPrintf(\"%s HTTP failure\", SIG);\n  369          }\n  370  \n  371          // psconfig contains the GetTileService return now\n  372          if (nullptr == (tileServiceConfig = CPLParseXMLString(psconfig)))\n  373:             throw CPLOPrintf(\"%s Error parsing the GetTileService response\", SIG);\n  374  \n  375          if (nullptr == (TG = CPLSearchXMLNode(tileServiceConfig, \"TiledPatterns\")))\n  376:             throw CPLOPrintf(\"%s Can't locate TiledPatterns in server response.\", SIG);\n  377  \n  378          // Get the global base_url and bounding box, these can be overwritten at the tileGroup level\n  ...\n  383  \n  384          if (nullptr == (TG = SearchLeafGroupName(TG->psChild, tiledGroupName)))\n  385:             throw CPLOPrintf(\"%s No TiledGroup \"\"%s\"\" in server response.\", SIG, tiledGroupName.c_str());\n  386  \n  387          int band_count = atoi(CPLGetXMLValue(TG, \"Bands\", \"3\"));\n  388  \n  389          if (!GDALCheckBandCount(band_count, FALSE))\n  390:             throw CPLOPrintf(\"%s Invalid number of bands in server response\", SIG);\n  391  \n  392          // Collect all keys defined by this tileset\n  ...\n  416          m_base_url = CPLGetXMLValue(TG, \"OnlineResource.xlink:href\", global_base_url);\n  417          if (m_base_url[0] == '\\0')\n  418:             throw CPLOPrintf(\"%s Can't locate OnlineResource in the server response\", SIG);\n  419  \n  420          // Bounding box, local, global, local lat-lon, global lat-lon, in this order\n  ...\n  425  \n  426          if (nullptr == bbox)\n  427:             throw CPLOPrintf(\"%s Can't locate the LatLonBoundingBox in server response\", SIG);\n  428  \n  429          m_data_window.m_x0 = CPLAtof(CPLGetXMLValue(bbox, \"minx\", \"0\"));\n  ...\n  433  \n  434          if ((m_data_window.m_x1 - m_data_window.m_x0) < 0)\n  435:             throw CPLOPrintf(\"%s Coordinate order in BBox problem in server response\", SIG);\n  436  \n  437          // Is there a palette?\n  ...\n  463                  eInterp = GPI_RGB;\n  464              else\n  465:                 throw CPLOPrintf(\"%s Palette Model %s is unknown, use RGB or RGBA\", SIG, pModel.c_str());\n  466  \n  467              if ((entries < 1) || (entries > 256))\n  468:                 throw CPLOPrintf(\"%s Palette definition error\", SIG);\n  469  \n  470              // Create it and initialize it to nothing\n  ...\n  485  \n  486                      if (start_idx < 0)\n  487:                         throw CPLOPrintf(\"%s Palette index %d not allowed\", SIG, start_idx);\n  488  \n  489                      poColorTable->SetColorEntry(start_idx, &ce_start);\n  ...\n  493                          end_idx = static_cast<int>(getXMLNum(p, \"idx\", CPLOPrintf(\"%d\", start_idx + 1)));\n  494                          if ((end_idx <= start_idx) || (start_idx >= entries))\n  495:                             throw CPLOPrintf(\"%s Index Error at index %d\", SIG, end_idx);\n  496  \n  497                          poColorTable->CreateColorRamp(start_idx, &ce_start, end_idx, &ce_end);\n  ...\n  506              catch (const CPLString &) {\n  507                  delete poColorTable;\n  508:                 throw;\n  509              }\n  510          } // If palette\n  ...\n  531                  const char* pszHEIGHT = CSLFetchNameValue(papszTokens, \"HEIGHT\");\n  532                  if (pszWIDTH == nullptr || pszHEIGHT == nullptr)\n  533:                     throw CPLOPrintf(\"%s Cannot find width or height parameters in %s\", SIG, request.c_str());\n  534  \n  535                  mbsx = atoi(pszWIDTH);\n  ...\n  544                  if (-1 == m_bsy) m_bsy = mbsy;\n  545                  if ((m_bsx != mbsx) || (m_bsy != mbsy))\n  546:                     throw CPLOPrintf(\"%s Tileset uses different block sizes\", SIG);\n  547  \n  548                  if (CPLsscanf(CSLFetchNameValueDef(papszTokens, \"BBOX\", \"\"), \"%lf,%lf,%lf,%lf\", &x, &y, &X, &Y) != 4)\n  549:                     throw CPLOPrintf(\"%s Error parsing BBOX, pattern %d\\n\", SIG, overview_count + 1);\n  550  \n  551                  // Pick the largest size\n  ...\n  557              catch (const CPLString &) {\n  558                  CSLDestroy(papszTokens);\n  559:                 throw;\n  560              }\n  561  \n  ...\n  595              // Base scale should be very close to 1\n  596              if ((0 == i) && (fabs(scale - 1) > 1e-6))\n  597:                 throw CPLOPrintf(\"%s Base resolution pattern missing\", SIG);\n  598  \n  599              // Prepare the request and insert it back into the list\n  ...\n  621  \n  622          if ((overview_count == 0) || (m_bsx < 1) || (m_bsy < 1))\n  623:             throw CPLOPrintf(\"%s No usable TilePattern elements found\", SIG);\n  624  \n  625          // Do we need to embed the server configuration in the prototype XML\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\gcore\\gdalabstractbandblockcache.cpp:\n  192          poBlock->RecycleFor(nXBlockOff, nYBlockOff);\n  193      else\n  194:         poBlock = new (std::nothrow) GDALRasterBlock(\n  195              poBand, nXBlockOff, nYBlockOff );\n  196      return poBlock;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\gcore\\gdalarraybandblockcache.cpp:\n   89  GDALAbstractBandBlockCache* GDALArrayBandBlockCacheCreate(GDALRasterBand* poBand)\n   90  {\n   91:     return new (std::nothrow) GDALArrayBandBlockCache(poBand);\n   92  }\n   93  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\gcore\\gdaldataset.cpp:\n  244  GDALDataset::GDALDataset(int bForceCachedIOIn):\n  245      bForceCachedIO(CPL_TO_BOOL(bForceCachedIOIn)),\n  246:     m_poPrivate(new(std::nothrow) GDALDataset::Private)\n  247  {\n  248  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\m4\\acinclude.m4:\n  177  \n  178    dnl Test for BSD systems that support ftello/fseeko.\n  179:   dnl OpenBSD throws warnings about using strcpy/strcat, so we use CC instead of CXX\n  180  \n  181    if test x\"$with_unix_stdio_64\" = x\"\" ; then\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\m4\\lib-link.m4:\n  552                      ;;\n  553                    *.la)\n  554:                     dnl Handle this in the next round. Throw away the .la's\n  555                      dnl directory; it is already contained in a preceding -L\n  556                      dnl option.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\m4\\libtool.m4:\n 5958      sunos4*)\n 5959        if test sequent = \"$host_vendor\"; then\n 5960: \t# Use $CC to link under sequent, because it throws in some extra .o\n 5961  \t# files that make .init and .fini sections work.\n 5962  \t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrfeature.cpp:\n  247  \n  248  {\n  249:     OGRFeature* poFeature = new (std::nothrow) OGRFeature( poDefn );\n  250      if( poFeature == nullptr )\n  251          return nullptr;\n  ...\n 1741   * @param pszFieldName field name\n 1742   *\n 1743:  * @return the field value, or throw a FieldNotFoundException if not found.\n 1744   * @since GDAL 2.3\n 1745   */\n ....\n 1748      int iField = GetFieldIndex(pszFieldName);\n 1749      if( iField < 0 )\n 1750:         throw FieldNotFoundException();\n 1751      return {this, iField};\n 1752  }\n ....\n 1757   * @param pszFieldName field name\n 1758   *\n 1759:  * @return the field value, or throw a FieldNotFoundException if not found.\n 1760   * @since GDAL 2.3\n 1761   */\n ....\n 1764      int iField = GetFieldIndex(pszFieldName);\n 1765      if( iField < 0 )\n 1766:         throw FieldNotFoundException();\n 1767      return {this, iField};\n 1768  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrgeometryfactory.cpp:\n  532      {\n  533        case wkbPoint:\n  534:           return new (std::nothrow) OGRPoint();\n  535  \n  536        case wkbLineString:\n  537:           return new (std::nothrow) OGRLineString();\n  538  \n  539        case wkbPolygon:\n  540:           return new (std::nothrow) OGRPolygon();\n  541  \n  542        case wkbGeometryCollection:\n  543:           return new (std::nothrow) OGRGeometryCollection();\n  544  \n  545        case wkbMultiPolygon:\n  546:           return new (std::nothrow) OGRMultiPolygon();\n  547  \n  548        case wkbMultiPoint:\n  549:           return new (std::nothrow) OGRMultiPoint();\n  550  \n  551        case wkbMultiLineString:\n  552:           return new (std::nothrow) OGRMultiLineString();\n  553  \n  554        case wkbLinearRing:\n  555:           return new (std::nothrow) OGRLinearRing();\n  556  \n  557        case wkbCircularString:\n  558:           return new (std::nothrow) OGRCircularString();\n  559  \n  560        case wkbCompoundCurve:\n  561:           return new (std::nothrow) OGRCompoundCurve();\n  562  \n  563        case wkbCurvePolygon:\n  564:           return new (std::nothrow) OGRCurvePolygon();\n  565  \n  566        case wkbMultiCurve:\n  567:           return new (std::nothrow) OGRMultiCurve();\n  568  \n  569        case wkbMultiSurface:\n  570:           return new (std::nothrow) OGRMultiSurface();\n  571  \n  572        case wkbTriangle:\n  573:           return new (std::nothrow) OGRTriangle();\n  574  \n  575        case wkbPolyhedralSurface:\n  576:           return new (std::nothrow) OGRPolyhedralSurface();\n  577  \n  578        case wkbTIN:\n  579:           return new (std::nothrow) OGRTriangulatedSurface();\n  580  \n  581        default:\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrpoint.cpp:\n  175  \n  176  {\n  177:     OGRPoint *poNewPoint = new (std::nothrow) OGRPoint( x, y, z, m );\n  178      if( poNewPoint == nullptr )\n  179          return nullptr;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\couchdb\\ogrcouchdbdatasource.cpp:\n  399      if (EQUAL(pszUpdatePermissions, \"LOGGED_USER\"))\n  400      {\n  401:         osValidation = \"{\\\"validate_doc_update\\\": \\\"function(new_doc, old_doc, userCtx) { if(!userCtx.name) { throw({forbidden: \\\\\\\"Please log in first.\\\\\\\"}); } }\\\" }\";\n  402      }\n  403      else if (EQUAL(pszUpdatePermissions, \"ALL\"))\n  ...\n  407      else if (EQUAL(pszUpdatePermissions, \"ADMIN\"))\n  408      {\n  409:         osValidation = \"{\\\"validate_doc_update\\\": \\\"function(new_doc, old_doc, userCtx) {if (userCtx.roles.indexOf('_admin') === -1) { throw({forbidden: \\\\\\\"No changes allowed except by admin.\\\\\\\"}); } }\\\" }\";\n  410      }\n  411      else if (STARTS_WITH(pszUpdatePermissions, \"function(\"))\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\dwg\\ogrdwg_blockmap.cpp:\n   69          // Now we will process entities till we run out.\n   70          // We aggregate the geometries of the features into a multi-geometry,\n   71:         // but throw away other stuff attached to the features.\n   72  \n   73          OGRFeature *poFeature = nullptr;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\dxf\\ogrdxflayer.cpp:\n 2811  /*     the block have been pushed to the extra feature queue.           */\n 2812  /*     If poFeature is not returned, it is deleted.                     */\n 2813: /*     Throws std::invalid_argument if the requested block              */\n 2814  /*     doesn't exist.                                                   */\n 2815  /*                                                                      */\n ....\n 2863          //CPLDebug( \"DXF\", \"Attempt to insert missing block %s\", osBlockName );\n 2864          poDS->PopBlockInsertion();\n 2865:         throw std::invalid_argument(\"osBlockName\");\n 2866      }\n 2867  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\gml\\gmlhandler.cpp:\n   86              const_cast<Attributes *>(&attrs)) == OGRERR_NOT_ENOUGH_MEMORY )\n   87      {\n   88:         throw SAXNotSupportedException(\"Out of memory\");\n   89      }\n   90  }\n   ..\n  101      if (GMLHandler::endElement() == OGRERR_NOT_ENOUGH_MEMORY)\n  102      {\n  103:         throw SAXNotSupportedException(\"Out of memory\");\n  104      }\n  105  }\n  ...\n  118      if (eErr == OGRERR_NOT_ENOUGH_MEMORY)\n  119      {\n  120:         throw SAXNotSupportedException(\"Out of memory\");\n  121      }\n  122  }\n  ...\n  147      if (m_nEntityCounter > 1000 && !m_poReader->HasStoppedParsing())\n  148      {\n  149:         throw SAXNotSupportedException(\n  150              \"File probably corrupted (million laugh pattern)\");\n  151      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\ili\\ili2handler.cpp:\n  167      if (m_nEntityCounter > 1000)\n  168      {\n  169:         throw SAXNotSupportedException (\n  170              \"File probably corrupted (million laugh pattern)\" );\n  171      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\mdb\\ogrmdbjackcess.cpp:\n  335  int OGRMDBJavaEnv::ExceptionOccurred()\n  336  {\n  337:     jthrowable exc = env->ExceptionOccurred();\n  338      if (exc)\n  339      {\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\osm\\gpb.h:\n   53  };\n   54  \n   55: #define THROW_GPB_EXCEPTION throw GPBException(__LINE__)\n   56  \n   57  /************************************************************************/\n   ..\n  109      { \\\n  110          nVal = ReadVarUInt32(&pabyData); \\\n  111:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  112      }\n  113  \n  ...\n  115      { \\\n  116          READ_VARUINT32(pabyData, pabyDataLimit, nSize); \\\n  117:         if (CHECK_OOB && nSize > (unsigned int)(pabyDataLimit - pabyData)) THROW_GPB_EXCEPTION; \\\n  118      }\n  119  \n  ...\n  156      { \\\n  157          nVal = ReadVarUInt64(&pabyData); \\\n  158:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  159      }\n  160  \n  ...\n  162      { \\\n  163          READ_VARUINT64(pabyData, pabyDataLimit, nSize); \\\n  164:         if (CHECK_OOB && nSize > (unsigned int)(pabyDataLimit - pabyData)) THROW_GPB_EXCEPTION; \\\n  165      }\n  166  \n  ...\n  177      { \\\n  178          nVal = ReadVarInt64(&pabyData); \\\n  179:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  180      }\n  181  \n  ...\n  208      { \\\n  209          nVal = ReadVarSInt64(&pabyData); \\\n  210:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  211      }\n  212  \n  ...\n  231      { \\\n  232          nVal = ReadVarInt32(&pabyData); \\\n  233:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  234      }\n  235  \n  ...\n  237      { \\\n  238          nVal = DecodeSInt(static_cast<GUInt32>(ReadVarUInt64(&pabyData))); \\\n  239:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  240      }\n  241  \n  ...\n  247  {\n  248      if( *ppabyData + sizeof(float) > pabyDataLimit )\n  249:         THROW_GPB_EXCEPTION;\n  250      float fValue;\n  251      memcpy(&fValue, *ppabyData, sizeof(float));\n  ...\n  262  {\n  263      if( *ppabyData + sizeof(double) > pabyDataLimit )\n  264:         THROW_GPB_EXCEPTION;\n  265      double dfValue;\n  266      memcpy(&dfValue, *ppabyData, sizeof(double));\n  ...\n  292      { \\\n  293          SkipVarInt(&pabyData); \\\n  294:         if (CHECK_OOB && pabyData > pabyDataLimit) THROW_GPB_EXCEPTION; \\\n  295      }\n  296  \n  ...\n  300          READ_SIZE(pabyData, pabyDataLimit, l_nDataLength); \\\n  301          pszTxt = (char*)VSI_MALLOC_VERBOSE(l_nDataLength + 1); \\\n  302:         if( pszTxt == nullptr ) THROW_GPB_EXCEPTION; \\\n  303          memcpy(pszTxt, pabyData, l_nDataLength); \\\n  304          pszTxt[l_nDataLength] = 0; \\\n  ...\n  329              case WT_64BIT: \\\n  330              { \\\n  331:                 if (CHECK_OOB && pabyDataLimit - pabyData < 8) THROW_GPB_EXCEPTION; \\\n  332                  pabyData += 8; \\\n  333                  break; \\\n  ...\n  342              case WT_32BIT: \\\n  343              { \\\n  344:                 if (CHECK_OOB && pabyDataLimit - pabyData < 4) THROW_GPB_EXCEPTION; \\\n  345                  pabyData += 4; \\\n  346                  break; \\\n  347              } \\\n  348              default: \\\n  349:                 THROW_GPB_EXCEPTION; \\\n  350          }\n  351  \n  ...\n  372          int _nOffset = SkipUnknownField(nKey, pabyData, pabyDataLimit, verbose); \\\n  373          if (_nOffset < 0) \\\n  374:             THROW_GPB_EXCEPTION; \\\n  375          pabyData += _nOffset; \\\n  376      }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\osm\\osm_parser.cpp:\n   92  };\n   93  \n   94: #define THROW_OSM_PARSING_EXCEPTION throw OSMParsingException(__LINE__)\n   95  \n   96  \n   ..\n  380  \n  381                  if( !ReadHeaderBBox(pabyData, pabyData + nBBOXSize, psCtxt) )\n  382:                     THROW_OSM_PARSING_EXCEPTION;\n  383  \n  384                  pabyData += nBBOXSize;\n  ...\n  395                              pszTxt);\n  396                      VSIFree(pszTxt);\n  397:                     THROW_OSM_PARSING_EXCEPTION;\n  398                  }\n  399                  VSIFree(pszTxt);\n  ...\n  475                  panStrOff, psCtxt->nStrAllocated * sizeof(int));\n  476              if( panStrOffNew == nullptr )\n  477:                 THROW_OSM_PARSING_EXCEPTION;\n  478              panStrOff = panStrOffNew;\n  479          }\n  ...\n  602  \n  603                  if( pabyDataIDs != nullptr )\n  604:                     THROW_OSM_PARSING_EXCEPTION;\n  605                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n  606  \n  ...\n  612                          psCtxt->pasNodes, psCtxt->nNodesAllocated * sizeof(OSMNode));\n  613                      if( pasNodesNew == nullptr )\n  614:                         THROW_OSM_PARSING_EXCEPTION;\n  615                      psCtxt->pasNodes = pasNodesNew;\n  616                  }\n  ...\n  638                          nFieldNumber <= DENSEINFO_IDX_VISIBLE )\n  639                      {\n  640:                         if( apabyData[nFieldNumber - 1] != nullptr) THROW_OSM_PARSING_EXCEPTION;\n  641                          READ_SIZE(pabyData, pabyDataNewLimit, nSize);\n  642  \n  ...\n  651  \n  652                  if( pabyData != pabyDataNewLimit )\n  653:                     THROW_OSM_PARSING_EXCEPTION;\n  654              }\n  655              else if( nKey == MAKE_KEY(DENSENODES_IDX_LAT, WT_DATA) )\n  656              {\n  657                  if( pabyDataLat != nullptr )\n  658:                     THROW_OSM_PARSING_EXCEPTION;\n  659                  unsigned int nSize = 0;\n  660                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n  ...\n  665              {\n  666                  if( pabyDataLon != nullptr )\n  667:                     THROW_OSM_PARSING_EXCEPTION;\n  668                  unsigned int nSize = 0;\n  669                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n  ...\n  674              {\n  675                  if( pabyDataKeyVal != nullptr )\n  676:                     THROW_OSM_PARSING_EXCEPTION;\n  677                  unsigned int nSize = 0;\n  678                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n  ...\n  690                          psCtxt->nTagsAllocated * sizeof(OSMTag));\n  691                      if( pasTagsNew == nullptr )\n  692:                         THROW_OSM_PARSING_EXCEPTION;\n  693                      psCtxt->pasTags = pasTagsNew;\n  694                  }\n  ...\n  703  \n  704          if( pabyData != pabyDataLimit )\n  705:             THROW_OSM_PARSING_EXCEPTION;\n  706  \n  707          if( pabyDataIDs != nullptr && pabyDataLat != nullptr &&\n  ...\n  773                      nUserSID = AddWithOverflowAccepted(nUserSID, nDeltaUserSID);\n  774                      if( nUserSID >= nStrCount )\n  775:                         THROW_OSM_PARSING_EXCEPTION;\n  776                  }\n  777                  /* if( pabyDataVisible )\n  ...\n  787                              break;\n  788                          if( nKey >= nStrCount )\n  789:                             THROW_OSM_PARSING_EXCEPTION;\n  790  \n  791                          READ_VARUINT32(pabyDataKeyVal, pabyDataLimit, nVal);\n  792                          if( nVal >= nStrCount )\n  793:                             THROW_OSM_PARSING_EXCEPTION;\n  794  \n  795                          pasTags[nTags].pszK = pszStrBuf + panStrOff[nKey];\n  ...\n  812                  if( pasNodes[nNodes].dfLon < -180 || pasNodes[nNodes].dfLon > 180 ||\n  813                      pasNodes[nNodes].dfLat < -90 || pasNodes[nNodes].dfLat > 90 )\n  814:                     THROW_OSM_PARSING_EXCEPTION;\n  815                  pasNodes[nNodes].sInfo.bTimeStampIsStr = false;\n  816                  pasNodes[nNodes].sInfo.ts.nTimeStamp = nTimeStamp;\n  ...\n  830  \n  831              if(pabyDataIDs != pabyDataIDsLimit)\n  832:                 THROW_OSM_PARSING_EXCEPTION;\n  833          }\n  834  \n  ...\n  973                  const GByte* pabyDataNewLimit = nullptr;\n  974                  if( sNode.nTags != 0 )\n  975:                     THROW_OSM_PARSING_EXCEPTION;\n  976                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n  977  \n  ...\n  984                          psCtxt->nTagsAllocated * sizeof(OSMTag));\n  985                      if( pasTagsNew == nullptr )\n  986:                         THROW_OSM_PARSING_EXCEPTION;\n  987                      psCtxt->pasTags = pasTagsNew;\n  988                  }\n  ...\n  995  \n  996                      if( nKey2 >= psCtxt->nStrCount )\n  997:                         THROW_OSM_PARSING_EXCEPTION;\n  998  \n  999                      psCtxt->pasTags[sNode.nTags].pszK = psCtxt->pszStrBuf +\n ....\n 1003                  }\n 1004                  if( pabyData != pabyDataNewLimit )\n 1005:                     THROW_OSM_PARSING_EXCEPTION;\n 1006              }\n 1007              else if( nKey == MAKE_KEY(NODE_IDX_VALS, WT_DATA) )\n ....\n 1009                  unsigned int nIter = 0;\n 1010                  if( sNode.nTags == 0 )\n 1011:                     THROW_OSM_PARSING_EXCEPTION;\n 1012                  // unsigned int nSize = 0;\n 1013                  // READ_VARUINT32(pabyData, pabyDataLimit, nSize);\n ....\n 1020  \n 1021                      if( nVal >= psCtxt->nStrCount )\n 1022:                         THROW_OSM_PARSING_EXCEPTION;\n 1023  \n 1024                      psCtxt->pasTags[nIter].pszV = psCtxt->pszStrBuf +\n ....\n 1033                  if( !ReadOSMInfo(pabyData, pabyDataLimit + nSize,\n 1034                                  &sNode.sInfo, psCtxt) )\n 1035:                     THROW_OSM_PARSING_EXCEPTION;\n 1036  \n 1037                  pabyData += nSize;\n ....\n 1045          if( sNode.dfLon < -180 || sNode.dfLon > 180 ||\n 1046              sNode.dfLat < -90 || sNode.dfLat > 90 )\n 1047:             THROW_OSM_PARSING_EXCEPTION;\n 1048  \n 1049          if( pabyData != pabyDataLimit )\n 1050:             THROW_OSM_PARSING_EXCEPTION;\n 1051  \n 1052          if( sNode.nTags )\n ....\n 1101                  const GByte* pabyDataNewLimit = nullptr;\n 1102                  if( sWay.nTags != 0 )\n 1103:                     THROW_OSM_PARSING_EXCEPTION;\n 1104                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n 1105  \n ....\n 1112                          psCtxt->nTagsAllocated * sizeof(OSMTag));\n 1113                      if( pasTagsNew == nullptr )\n 1114:                         THROW_OSM_PARSING_EXCEPTION;\n 1115                      psCtxt->pasTags = pasTagsNew;\n 1116                  }\n ....\n 1123  \n 1124                      if( nKey2 >= psCtxt->nStrCount )\n 1125:                         THROW_OSM_PARSING_EXCEPTION;\n 1126  \n 1127                      psCtxt->pasTags[sWay.nTags].pszK = psCtxt->pszStrBuf +\n ....\n 1131                  }\n 1132                  if( pabyData != pabyDataNewLimit )\n 1133:                     THROW_OSM_PARSING_EXCEPTION;\n 1134              }\n 1135              else if( nKey == MAKE_KEY(WAY_IDX_VALS, WT_DATA) )\n ....\n 1137                  unsigned int nIter = 0;\n 1138                  if( sWay.nTags == 0 )\n 1139:                     THROW_OSM_PARSING_EXCEPTION;\n 1140                  // unsigned int nSize = 0;\n 1141                  // READ_VARUINT32(pabyData, pabyDataLimit, nSize);\n ....\n 1148  \n 1149                      if( nVal >= psCtxt->nStrCount )\n 1150:                         THROW_OSM_PARSING_EXCEPTION;\n 1151  \n 1152                      psCtxt->pasTags[nIter].pszV = psCtxt->pszStrBuf +\n ....\n 1160  \n 1161                  if( !ReadOSMInfo(pabyData, pabyData + nSize, &sWay.sInfo, psCtxt) )\n 1162:                     THROW_OSM_PARSING_EXCEPTION;\n 1163  \n 1164                  pabyData += nSize;\n ....\n 1170                  const GByte* pabyDataNewLimit = nullptr;\n 1171                  if( sWay.nRefs != 0 )\n 1172:                     THROW_OSM_PARSING_EXCEPTION;\n 1173                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n 1174  \n ....\n 1181                              psCtxt->nNodeRefsAllocated * sizeof(GIntBig));\n 1182                      if( panNodeRefsNew == nullptr )\n 1183:                         THROW_OSM_PARSING_EXCEPTION;\n 1184                      psCtxt->panNodeRefs = panNodeRefsNew;\n 1185                  }\n ....\n 1196  \n 1197                  if( pabyData != pabyDataNewLimit )\n 1198:                     THROW_OSM_PARSING_EXCEPTION;\n 1199              }\n 1200              else\n ....\n 1205  \n 1206          if( pabyData != pabyDataLimit )\n 1207:             THROW_OSM_PARSING_EXCEPTION;\n 1208  \n 1209          if( sWay.nTags )\n ....\n 1262                  const GByte* pabyDataNewLimit = nullptr;\n 1263                  if( sRelation.nTags != 0 )\n 1264:                     THROW_OSM_PARSING_EXCEPTION;\n 1265                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n 1266  \n ....\n 1273                          psCtxt->nTagsAllocated * sizeof(OSMTag));\n 1274                      if( pasTagsNew == nullptr )\n 1275:                         THROW_OSM_PARSING_EXCEPTION;\n 1276                      psCtxt->pasTags = pasTagsNew;\n 1277                  }\n ....\n 1284  \n 1285                      if( nKey2 >= psCtxt->nStrCount )\n 1286:                         THROW_OSM_PARSING_EXCEPTION;\n 1287  \n 1288                      psCtxt->pasTags[sRelation.nTags].pszK =\n ....\n 1292                  }\n 1293                  if( pabyData != pabyDataNewLimit )\n 1294:                     THROW_OSM_PARSING_EXCEPTION;\n 1295              }\n 1296              else if( nKey == MAKE_KEY(RELATION_IDX_VALS, WT_DATA) )\n ....\n 1298                  unsigned int nIter = 0;\n 1299                  if( sRelation.nTags == 0 )\n 1300:                     THROW_OSM_PARSING_EXCEPTION;\n 1301                  // unsigned int nSize = 0;\n 1302                  // READ_VARUINT32(pabyData, pabyDataLimit, nSize);\n ....\n 1309  \n 1310                      if( nVal >= psCtxt->nStrCount )\n 1311:                         THROW_OSM_PARSING_EXCEPTION;\n 1312  \n 1313                      psCtxt->pasTags[nIter].pszV = psCtxt->pszStrBuf +\n ....\n 1322                  if( !ReadOSMInfo(pabyData, pabyData + nSize,\n 1323                                  &sRelation.sInfo, psCtxt) )\n 1324:                     THROW_OSM_PARSING_EXCEPTION;\n 1325  \n 1326                  pabyData += nSize;\n ....\n 1331                  const GByte* pabyDataNewLimit = nullptr;\n 1332                  if( sRelation.nMembers != 0 )\n 1333:                     THROW_OSM_PARSING_EXCEPTION;\n 1334                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n 1335  \n ....\n 1342                              psCtxt->nMembersAllocated * sizeof(OSMMember));\n 1343                      if( pasMembersNew == nullptr )\n 1344:                         THROW_OSM_PARSING_EXCEPTION;\n 1345                      psCtxt->pasMembers = pasMembersNew;\n 1346                  }\n ....\n 1352                      READ_VARUINT32(pabyData, pabyDataNewLimit, nRoleSID);\n 1353                      if( nRoleSID >= psCtxt->nStrCount )\n 1354:                         THROW_OSM_PARSING_EXCEPTION;\n 1355  \n 1356                      psCtxt->pasMembers[sRelation.nMembers].pszRole =\n ....\n 1362  \n 1363                  if( pabyData != pabyDataNewLimit )\n 1364:                     THROW_OSM_PARSING_EXCEPTION;\n 1365              }\n 1366              else if( nKey == MAKE_KEY(RELATION_IDX_MEMIDS, WT_DATA) )\n ....\n 1369                  GIntBig nMemID = 0;\n 1370                  if( sRelation.nMembers == 0 )\n 1371:                     THROW_OSM_PARSING_EXCEPTION;\n 1372                  // unsigned int nSize = 0;\n 1373                  // READ_VARUINT32(pabyData, pabyDataLimit, nSize);\n ....\n 1387                  unsigned int nIter = 0;\n 1388                  if( sRelation.nMembers == 0 )\n 1389:                     THROW_OSM_PARSING_EXCEPTION;\n 1390                  unsigned int nSize = 0;\n 1391                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n 1392                  if( nSize != sRelation.nMembers )\n 1393:                     THROW_OSM_PARSING_EXCEPTION;\n 1394  \n 1395                  for(; nIter < sRelation.nMembers; nIter++)\n ....\n 1397                      unsigned int nType = pabyData[nIter];\n 1398                      if( nType > MEMBER_RELATION )\n 1399:                         THROW_OSM_PARSING_EXCEPTION;\n 1400  \n 1401                      psCtxt->pasMembers[nIter].eType = (OSMMemberType) nType;\n ....\n 1411  \n 1412          if( pabyData != pabyDataLimit )\n 1413:             THROW_OSM_PARSING_EXCEPTION;\n 1414  \n 1415          if( sRelation.nTags )\n ....\n 1474                  if( !apfnPrimitives[nFieldNumber](pabyData, pabyData + nSize,\n 1475                                                  psCtxt) )\n 1476:                     THROW_OSM_PARSING_EXCEPTION;\n 1477  \n 1478                  pabyData += nSize;\n ....\n 1528                  READ_VARINT32(pabyData, pabyDataLimit, psCtxt->nGranularity);\n 1529                  if( psCtxt->nGranularity <= 0 )\n 1530:                     THROW_OSM_PARSING_EXCEPTION;\n 1531              }\n 1532              else if( nKey == MAKE_KEY(PRIMITIVEBLOCK_IDX_DATE_GRANULARITY,\n ....\n 1550  \n 1551          if( pabyData != pabyDataLimit )\n 1552:             THROW_OSM_PARSING_EXCEPTION;\n 1553  \n 1554          pabyData = pabyDataSave;\n ....\n 1563                  GByte* pbSaveAfterByte = nullptr;\n 1564                  if( psCtxt->nStrCount != 0 )\n 1565:                     THROW_OSM_PARSING_EXCEPTION;\n 1566                  unsigned int nSize = 0;\n 1567                  READ_SIZE(pabyData, pabyDataLimit, nSize);\n ....\n 1579  \n 1580                  if( !ReadStringTable(pabyData, pabyData + nSize, psCtxt) )\n 1581:                     THROW_OSM_PARSING_EXCEPTION;\n 1582  \n 1583                  pabyData += nSize;\n ....\n 1591  \n 1592                  if( nKey == MAKE_KEY(PRIMITIVEBLOCK_IDX_STRINGTABLE, WT_DATA) )\n 1593:                     THROW_OSM_PARSING_EXCEPTION;\n 1594  \n 1595                  /* Yes we go on ! */\n ....\n 1602  \n 1603                  if( !ReadPrimitiveGroup(pabyData, pabyData + nSize, psCtxt))\n 1604:                     THROW_OSM_PARSING_EXCEPTION;\n 1605  \n 1606                  pabyData += nSize;\n ....\n 1742                      !RunDecompressionJobsAndProcessAll(psCtxt, eType) )\n 1743                  {\n 1744:                     THROW_OSM_PARSING_EXCEPTION;\n 1745                  }\n 1746  \n 1747                  unsigned int nDataLength = 0;\n 1748                  READ_SIZE(pabyData, pabyDataLimit, nDataLength);\n 1749:                 if( nDataLength > MAX_BLOB_SIZE ) THROW_OSM_PARSING_EXCEPTION;\n 1750  \n 1751                  // printf(\"raw data size = %d\\n\", nDataLength);\n ....\n 1775                          psCtxt->nBlobSize - psCtxt->nBlobOffset)\n 1776                  {\n 1777:                     THROW_OSM_PARSING_EXCEPTION;\n 1778                  }\n 1779  \n ....\n 1787                          CPLError(CE_Failure, CPLE_AppDefined,\n 1788                                      \"Excessive uncompressed vs compressed ratio\");\n 1789:                         THROW_OSM_PARSING_EXCEPTION;\n 1790                      }\n 1791                      if( psCtxt->nJobs > 0 &&\n ....\n 1820                          }\n 1821                          if( psCtxt->nUncompressedAllocated > UINT_MAX - EXTRA_BYTES )\n 1822:                             THROW_OSM_PARSING_EXCEPTION;\n 1823                          pabyUncompressedNew =\n 1824                              (GByte*)VSI_REALLOC_VERBOSE(psCtxt->pabyUncompressed,\n 1825                                      psCtxt->nUncompressedAllocated + EXTRA_BYTES);\n 1826                          if( pabyUncompressedNew == nullptr )\n 1827:                             THROW_OSM_PARSING_EXCEPTION;\n 1828                          psCtxt->pabyUncompressed = pabyUncompressedNew;\n 1829                      }\n ....\n 1840                          if( !RunDecompressionJobsAndProcessAll(psCtxt, eType) )\n 1841                          {\n 1842:                             THROW_OSM_PARSING_EXCEPTION;\n 1843                          }\n 1844                      }\n ....\n 1870              if( !RunDecompressionJobs(psCtxt) )\n 1871              {\n 1872:                 THROW_OSM_PARSING_EXCEPTION;\n 1873              }\n 1874              // Just process one blob at a time\n 1875              if( !ProcessSingleBlob(psCtxt, psCtxt->asJobs[0], eType) )\n 1876              {\n 1877:                 THROW_OSM_PARSING_EXCEPTION;\n 1878              }\n 1879              psCtxt->iNextJob = 1;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\sde\\drv_sde.html:\n  117      version will be deleted before being recreated.  Note that this action\n  118      does nothing to reconcile any edits that existed on that version before\n  119:     doing so and essentially throws them away.\n  120  </li>\n  121  <li>\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\ogr\\ogrsf_frmts\\sde\\ogrsdelayer.cpp:\n  400  \n  401      // Since we assume that all layers can bear a NULL geometry,\n  402:     // throw the flag away.\n  403      nShapeTypeMask &= ~SE_NIL_TYPE_MASK;\n  404  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_csv.cpp:\n 1111      {\n 1112          VSIRewindL( psTable->fp );\n 1113:         CPLReadLineL( psTable->fp );         /* throw away the header line */\n 1114  \n 1115          psTable->papszRecFields =\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_mem_cache.h:\n  147      const auto iter = cache_.find(k);\n  148      if (iter == cache_.end()) {\n  149:       throw KeyNotFound();\n  150      }\n  151      keys_.splice(keys_.begin(), keys_, iter->second);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_safemaths.hpp:\n   95  {\n   96      if( x < 0 )\n   97:         throw CPLSafeIntOverflow();\n   98      return CPLSafeInt<unsigned>(static_cast<unsigned>(x));\n   99  }\n  ...\n  121      static void CPLMSVCSafeIntException::SafeIntOnOverflow()\n  122      {\n  123:         throw CPLSafeIntOverflow();\n  124      }\n  125      static void CPLMSVCSafeIntException::SafeIntOnDivZero()\n  126      {\n  127:         throw CPLSafeIntOverflowDivisionByZero();\n  128      }\n  129  };\n  ...\n  136      const auto b = B.v();\n  137      if( a > 0 && b > 0 && a > std::numeric_limits<T>::max() - b )\n  138:         throw CPLSafeIntOverflow();\n  139      if( a < 0 && b < 0 && a < std::numeric_limits<T>::min() - b )\n  140:         throw CPLSafeIntOverflow();\n  141      return CPLSM(a+b);\n  142  }\n  ...\n  148      int res;\n  149      if( __builtin_sadd_overflow(A.v(), B.v(), &res) )\n  150:         throw CPLSafeIntOverflow();\n  151      return CPLSM(res);\n  152  #elif defined(_MSC_VER)\n  ...\n  161          res > std::numeric_limits<int>::max() )\n  162      {\n  163:         throw CPLSafeIntOverflow();\n  164      }\n  165      return CPLSM(static_cast<int>(res));\n  ...\n  176      GInt64 res;\n  177      if( __builtin_saddll_overflow(A.v(), B.v(), &res) )\n  178:         throw CPLSafeIntOverflow();\n  179      return CPLSM(res);\n  180  #elif defined(_MSC_VER)\n  ...\n  194      unsigned res;\n  195      if( __builtin_uadd_overflow(A.v(), B.v(), &res) )\n  196:         throw CPLSafeIntOverflow();\n  197      return CPLSM(res);\n  198  #elif defined(_MSC_VER)\n  ...\n  204      const unsigned b = B.v();\n  205      if( a > std::numeric_limits<unsigned>::max() - b )\n  206:         throw CPLSafeIntOverflow();\n  207      return CPLSM(a+b);\n  208  #endif\n  ...\n  216      /* caution we must catch a == 0 && b = INT_MIN */\n  217      if( a >= 0 && b < 0 && a > std::numeric_limits<T>::max() + b )\n  218:         throw CPLSafeIntOverflow();\n  219      if( a < 0 && b > 0 && a < std::numeric_limits<T>::min() + b )\n  220:         throw CPLSafeIntOverflow();\n  221      return CPLSM(a-b);\n  222  }\n  ...\n  228      int res;\n  229      if( __builtin_ssub_overflow(A.v(), B.v(), &res) )\n  230:         throw CPLSafeIntOverflow();\n  231      return CPLSM(res);\n  232  #elif defined(_MSC_VER)\n  ...\n  241          res > std::numeric_limits<int>::max() )\n  242      {\n  243:         throw CPLSafeIntOverflow();\n  244      }\n  245      return CPLSM(static_cast<int>(res));\n  ...\n  256      GInt64 res;\n  257      if( __builtin_ssubll_overflow(A.v(), B.v(), &res) )\n  258:         throw CPLSafeIntOverflow();\n  259      return CPLSM(res);\n  260  #elif defined(_MSC_VER)\n  ...\n  274      unsigned res;\n  275      if( __builtin_usub_overflow(A.v(), B.v(), &res) )\n  276:         throw CPLSafeIntOverflow();\n  277      return CPLSM(res);\n  278  #elif defined(_MSC_VER)\n  ...\n  284      const unsigned b = B.v();\n  285      if( a < b )\n  286:         throw CPLSafeIntOverflow();\n  287      return CPLSM(a-b);\n  288  #endif\n  ...\n  295      const auto b = B.v();\n  296      if( a > 0 && b > 0 && a > std::numeric_limits<T>::max() / b )\n  297:         throw CPLSafeIntOverflow();\n  298      if( a > 0 && b < 0 && b < std::numeric_limits<T>::min() / a )\n  299:         throw CPLSafeIntOverflow();\n  300      if( a < 0 && b > 0 && a < std::numeric_limits<T>::min() / b )\n  301:         throw CPLSafeIntOverflow();\n  302      else if( a == std::numeric_limits<T>::min() )\n  303      {\n  304          if( b != 0 && b != 1 )\n  305:             throw CPLSafeIntOverflow();\n  306      }\n  307      else if( b == std::numeric_limits<T>::min() )\n  308      {\n  309          if( a != 0 && a != 1 )\n  310:             throw CPLSafeIntOverflow();\n  311      }\n  312      else if( a < 0 && b < 0 && -a > std::numeric_limits<T>::max() / (-b) )\n  313:         throw CPLSafeIntOverflow();\n  314  \n  315      return CPLSM(a*b);\n  ...\n  322      int res;\n  323      if( __builtin_smul_overflow(A.v(), B.v(), &res) )\n  324:         throw CPLSafeIntOverflow();\n  325      return CPLSM(res);\n  326  #elif defined(_MSC_VER)\n  ...\n  335          res > std::numeric_limits<int>::max() )\n  336      {\n  337:         throw CPLSafeIntOverflow();\n  338      }\n  339      return CPLSM(static_cast<int>(res));\n  ...\n  350      GInt64 res;\n  351      if( __builtin_smulll_overflow(A.v(), B.v(), &res) )\n  352:         throw CPLSafeIntOverflow();\n  353      return CPLSM(res);\n  354  #elif defined(_MSC_VER)\n  ...\n  368      unsigned res;\n  369      if( __builtin_umul_overflow(A.v(), B.v(), &res) )\n  370:         throw CPLSafeIntOverflow();\n  371      return CPLSM(res);\n  372  #elif defined(_MSC_VER)\n  ...\n  380      if( res > std::numeric_limits<unsigned>::max() )\n  381      {\n  382:         throw CPLSafeIntOverflow();\n  383      }\n  384      return CPLSM(static_cast<unsigned>(res));\n  ...\n  387      const unsigned b = B.v();\n  388      if( b > 0 && a > std::numeric_limits<unsigned>::max() / b )\n  389:         throw CPLSafeIntOverflow();\n  390      return CPLSM(a*b);\n  391  #endif\n  ...\n  398      const auto b = B.v();\n  399      if( b == 0 )\n  400:         throw CPLSafeIntOverflowDivisionByZero();\n  401      if( a == std::numeric_limits<T>::min() && b == -1 )\n  402:         throw CPLSafeIntOverflow();\n  403      return CPLSM(a/b);\n  404  }\n  ...\n  424      const unsigned b = B.v();\n  425      if( b == 0 )\n  426:         throw CPLSafeIntOverflowDivisionByZero();\n  427      return CPLSM(a/b);\n  428  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_vsil_curl.cpp:\n 1061              }\n 1062  \n 1063:             // If there was no VSI error thrown in the process,\n 1064              // fail by reporting the HTTP response code.\n 1065              if( bSetError && VSIGetLastErrorNo() == 0 )\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_vsil_unix_stdio_64.cpp:\n  637          strcmp(pszAccess, \"a+b\") == 0 || strcmp(pszAccess, \"a+\") == 0;\n  638      VSIUnixStdioHandle *poHandle =\n  639:         new(std::nothrow) VSIUnixStdioHandle( this, fp, bReadOnly,\n  640                                                bModeAppendReadWrite );\n  641      if( poHandle == nullptr )\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\port\\cpl_vsil_webhdfs.cpp:\n  954      }\n  955  \n  956:     // If there was no VSI error thrown in the process,\n  957      // fail by reporting the HTTP response code.\n  958      if( response_code != 200 && bSetError && VSIGetLastErrorNo() == 0 )\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\scripts\\cppcheck.sh:\n  363  fi\n  364  \n  365: if grep \"exceptRethrowCopy\" ${LOG_FILE} ; then\n  366:     echo \"exceptRethrowCopy check failed\"\n  367      ret_code=1\n  368  fi\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\scripts\\vagrant\\gdal.sh:\n   75  # Install pytest.\n   76  # First install pip 9, which is the last version which can upgrade the system's `six`\n   77: # 10+ throws an error :/\n   78  curl -sSL https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py\n   79  sudo -H python /tmp/get-pip.py 'pip<10'\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\cpl.i:\n  247  \n  248  #if defined(SWIGPYTHON) || defined(SWIGCSHARP)\n  249: /* We don't want errors to be cleared or thrown by this */\n  250  /* call */\n  251  %exception CPLGetLastErrorNo\n  ...\n  262  \n  263  #if defined(SWIGPYTHON) || defined(SWIGCSHARP)\n  264: /* We don't want errors to be cleared or thrown by this */\n  265  /* call */\n  266  %exception CPLGetLastErrorType\n  ...\n  279  \n  280  #if defined(SWIGPYTHON) || defined(SWIGCSHARP)\n  281: /* We don't want errors to be cleared or thrown by this */\n  282  /* call */\n  283  %exception CPLGetLastErrorMsg\n  ...\n  295  \n  296  #if defined(SWIGPYTHON) || defined(SWIGCSHARP)\n  297: /* We don't want errors to be cleared or thrown by this */\n  298  /* call */\n  299  %exception CPLGetErrorCounter\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\ogr.i:\n 2601        return CreateGeometryFromGML( gml );\n 2602      }\n 2603:     // throw?\n 2604      else {\n 2605          CPLError(CE_Failure, 1, \"Empty geometries cannot be constructed\");\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\Operations.i:\n  588                                                     0 );\n  589    if (ds == 0) {\n  590:     /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/\n  591    }\n  592    return ds;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\csharp\\gdal_csharp.i:\n  211        int retval;\n  212        if (overviewlist.Length <= 0)\n  213:         throw new ArgumentException(\"overviewlist size is small (BuildOverviews)\");\n  214  \n  215        IntPtr ptr = Marshal.AllocHGlobal(overviewlist.Length * Marshal.SizeOf(overviewlist[0]));\n  ...\n  248           IntPtr cPtr = __AllocCArray_GDAL_GCP(pGCPs.Length);\n  249           if (cPtr == IntPtr.Zero)\n  250:             throw new ApplicationException(\"Error allocating CArray with __AllocCArray_GDAL_GCP\");\n  251  \n  252           try {\n  ...\n  280           IntPtr cPtr = __AllocCArray_GDAL_GCP(pGCPs.Length);\n  281           if (cPtr == IntPtr.Zero)\n  282:             throw new ApplicationException(\"Error allocating CArray with __AllocCArray_GDAL_GCP\");\n  283  \n  284           try {\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\csharp\\ogr_csharp.i:\n   49        int size = WkbSize();\n   50        if (buffer.Length < size)\n   51:         throw new ArgumentException(\"Buffer size is small (ExportToWkb)\");\n   52  \n   53        IntPtr ptr = Marshal.AllocHGlobal(size * Marshal.SizeOf(buffer[0]));\n   ..\n   67    public static $csclassname CreateFromWkb(byte[] wkb){\n   68       if (wkb.Length == 0)\n   69:         throw new ArgumentException(\"Buffer size is small (CreateFromWkb)\");\n   70       $csclassname retval;\n   71       IntPtr ptr = Marshal.AllocHGlobal(wkb.Length * Marshal.SizeOf(wkb[0]));\n   ..\n   88  \n   89    public Geometry(wkbGeometryType type) : this(OgrPINVOKE.new_Geometry((int)type, null, 0, IntPtr.Zero, null), true, null) {\n   90:     if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();\n   91    }\n   92  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\csharp\\typemaps_csharp.i:\n   60  %}\n   61  \n   62: %typemap(out,fragment=\"OGRErrMessages\",canthrow=1) OGRErr\n   63  {\n   64:   /* %typemap(out,fragment=\"OGRErrMessages\",canthrow=1) OGRErr */\n   65    $result = result;\n   66  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\java\\gdal_java.i:\n  748         long buf_size = buf_xsize * buf_ysize * (gdal.GetDataTypeSize(buf_type) / 8);\n  749         if ((int)buf_size != buf_size)\n  750:                throw new OutOfMemoryError();\n  751         java.nio.ByteBuffer nioBuffer = java.nio.ByteBuffer.allocateDirect((int)buf_size);\n  752         int ret = ReadRaster_Direct(xoff, yoff, xsize, ysize, buf_xsize, buf_ysize, buf_type, nioBuffer);\n  ...\n  870      if(swigCPtr != 0 && swigCMemOwn) {\n  871        swigCMemOwn = false;\n  872:       throw new UnsupportedOperationException(\"C++ destructor does not have public access\");\n  873      }\n  874      swigCPtr = 0;\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\java\\ogr_java.i:\n  125    public $javaclassname(long cPtr, boolean cMemoryOwn) {\n  126      if (cPtr == 0)\n  127:         throw new RuntimeException();\n  128      swigCMemOwn = cMemoryOwn;\n  129      swigCPtr = cPtr;\n  ...\n  201      {\n  202          if (obj.nativeObject == null)\n  203:             throw new RuntimeException(\"Cannot disown an object that was not owned...\");\n  204          obj.nativeObject.dontDisposeNativeResources();\n  205          obj.nativeObject = null;\n  ...\n  267    {\n  268        if (wkbArray == null)\n  269:           throw new NullPointerException();\n  270        byte[] srcArray = ExportToWkb(byte_order);\n  271        if (wkbArray.length < srcArray.length)\n  272:           throw new RuntimeException(\"Array too small\");\n  273  \n  274        System.arraycopy( srcArray, 0, wkbArray, 0, srcArray.length );\n  ...\n  445    public $javaclassname(long cPtr, boolean cMemoryOwn) {\n  446      if (cPtr == 0)\n  447:         throw new RuntimeException();\n  448      swigCPtr = cPtr;\n  449      if (cMemoryOwn)\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\java\\ogr_java_extend.i:\n   67        return CreateGeometryFromGML( gml );\n   68      }\n   69:     // throw?\n   70      else return 0;\n   71    }\n   ..\n   75        return (OGRGeometryShadow*) OGR_G_CreateGeometry( type );\n   76      }\n   77:     // throw?\n   78      else return 0;\n   79    }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\java\\typemaps_java.i:\n   20    protected $javaclassname(long cPtr, boolean cMemoryOwn) {\n   21      if (cPtr == 0)\n   22:         throw new RuntimeException();\n   23      swigCMemOwn = cMemoryOwn;\n   24      swigCPtr = cPtr;\n   ..\n   75    $2 = &tmphasval;\n   76    if($input == NULL || jenv->GetArrayLength($input) < 1) {\n   77:     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null array or empty array\");\n   78      return $null;\n   79    }\n   ..\n  201              {\n  202                  free ($2 );\n  203:                 SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null object in array\");\n  204                  return $null;\n  205              }\n  ...\n  515    /* %typemap(out) OGRErr */\n  516    if (result != 0 && bUseExceptions) {\n  517:     SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,\n  518        OGRErrMessages(result));\n  519      return $null;\n  ...\n  836              {\n  837                  free ($2 );\n  838:                 SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null object in array\");\n  839                  return $null;\n  840              }\n  ...\n  896              {\n  897                  free ($2 );\n  898:                 SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null object in array\");\n  899                  return $null;\n  900              }\n  ...\n  960        {\n  961            CSLDestroy($1);\n  962:           SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, \"a key in the hashtable is not a string\");\n  963            return $null;\n  964        }\n  ...\n  967        {\n  968            CSLDestroy($1);\n  969:           SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, \"a value in the hashtable is not a string\");\n  970            return $null;\n  971        }\n  ...\n 1055        {\n 1056            CSLDestroy($1);\n 1057:           SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, \"an element in the vector is not a string\");\n 1058            return $null;\n 1059        }\n ....\n 1170      /* %typemap(in) char **OUTPUT (char* ret) */\n 1171      if (!$input) {\n 1172:       SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"array null\");\n 1173        return $null;\n 1174      }\n 1175      if (jenv->GetArrayLength($input) == 0) {\n 1176:       SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, \"Array must contain at least 1 element\");\n 1177        return $null;\n 1178      }\n ....\n 1281        char errorMsg[512];\n 1282        sprintf(errorMsg, \"array of size %d expected\", $dim0);\n 1283:       SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);\n 1284        return $null;\n 1285    }\n ....\n 1318        char errorMsg[512];\n 1319        sprintf(errorMsg, \"array of size %d expected\", $dim0);\n 1320:       SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);\n 1321        return $null;\n 1322    }\n ....\n 1356        char errorMsg[512];\n 1357        sprintf(errorMsg, \"array of size %d expected\", $dim0);\n 1358:       SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);\n 1359        return $null;\n 1360    }\n ....\n 1451      if ($input == 0)\n 1452      {\n 1453:         SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null array\");\n 1454          return $null;\n 1455      }\n ....\n 1457      if ($1 == NULL)\n 1458      {\n 1459:         SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,\n 1460                                  \"Unable to get address of direct buffer. Buffer must be allocated direct.\");\n 1461          return $null;\n ....\n 1489      if ($input == 0)\n 1490      {\n 1491:         SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null array\");\n 1492          return $null;\n 1493      }\n ....\n 1498      if ($1 == NULL)\n 1499      {\n 1500:         SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,\n 1501                                  \"Unable to allocate temporary buffer.\");\n 1502          return $null;\n ....\n 1558      if ($input == 0)\n 1559      {\n 1560:         SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null array\");\n 1561          return $null;\n 1562      }\n ....\n 1566      if ($1 == NULL)\n 1567      {\n 1568:         SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,\n 1569                                  \"Unable to get buffer.\");\n 1570          return $null;\n ....\n 1649              CPLFree ($3);\n 1650              CPLFree ($4);\n 1651:             SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, \"null object in array\");\n 1652              return $null;\n 1653          }\n ....\n 1658              CPLFree ($3);\n 1659              CPLFree ($4);\n 1660:             SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, \"wrong array dimensions\");\n 1661              return $null;\n 1662          }\n ....\n 1714          if (len != xyzLen3)\n 1715          {\n 1716:             SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, \"wrong array dimensions\");\n 1717              return $null;\n 1718          }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\python\\python_exceptions.i:\n   13    /*\n   14    ** Generally we want to suppress error reporting if we have exceptions\n   15:   ** enabled as the error message will be in the exception thrown in\n   16    ** Python.\n   17    */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\include\\python\\typemaps_python.i:\n  889      if ( size > 0 && size == (int)size) {\n  890  %#if PY_VERSION_HEX < 0x03000000\n  891:       // PyMapping_Items also work with python 2.x  but throws a warning about\n  892        // -Wwrite-strings warning\n  893        PyObject *item_list = PyObject_CallMethod($input,const_cast<char*>(\"items\"),NULL);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\javadoc.java:\n 6039   @param name the name of the datasource to delete.\n 6040  \n 6041:  @return 0 on success. Otherwise throws a RuntimeException if this\n 6042   is not supported by this driver (or an error code if DontUseExceptions() has been called)\n 6043  */\n ....\n 6247   @param index the index of the layer to delete.\n 6248  \n 6249:  @return 0 on success. Otherwise throws a RuntimeException if deleting\n 6250   layers is not supported for this datasource  (or an error code if DontUseExceptions() has been called).\n 6251  */\n ....\n 6487   @param feature the feature to write to disk.\n 6488  \n 6489:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6490  \n 6491   @see #SetFeature(Feature)\n ....\n 6513  form depending on the limitations of the format driver.\n 6514  \n 6515: @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6516  */\n 6517  public class Layer:public int CreateField(FieldDefn field_def, int approx_ok)\n ....\n 6545  @param iField index of the field to delete.\n 6546  \n 6547: @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6548  \n 6549  @since OGR 1.9.0\n ....\n 6576  is a permutation of [0, GetLayerDefn().GetFieldCount()-1].\n 6577  \n 6578: @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6579  \n 6580  @since OGR 1.9.0\n ....\n 6610  @param iNewFieldPos new position of the field to move. Must be in the range [0,GetFieldCount()-1].\n 6611  \n 6612: @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6613  \n 6614  @since OGR 1.9.0\n ....\n 6639  definition must be taken into account.\n 6640  \n 6641: @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6642  \n 6643  @since OGR 1.9.0\n ....\n 6650   Returns the extent (MBR) of the data in the layer.  If force is 0,\n 6651   and it would be expensive to establish the extent then a RuntimeException\n 6652:  will be thrown indicating that the extent is not known.  If force is\n 6653   1 then some implementations will actually scan the entire layer once\n 6654   to compute the MBR of all the features in the layer.\n ....\n 6658   setting a spatial filter.\n 6659   <p>\n 6660:  Layers without any geometry may throw a RuntimeException just indicating that\n 6661   no meaningful extents could be collected.\n 6662  \n ....\n 6665   if it is expensive (1 for true, 0 for false).\n 6666  \n 6667:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6668  */\n 6669  public class Layer:public int GetExtent(double[] extent, int force)\n ....\n 6710   The feature with the indicated feature id is deleted from the layer if\n 6711   supported by the driver.  Most drivers do not support feature deletion,\n 6712:  and will throw a RuntimeException.  The <a href=\"#TestCapability(java.lang.String)\">TestCapability()</a>\n 6713   layer method may be called with OLCDeleteFeature to check if the driver\n 6714   supports feature deletion.\n ....\n 6716   @param fid the feature id to be deleted from the layer\n 6717  \n 6718:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6719  \n 6720  */\n ....\n 6928   current query.\n 6929  \n 6930:  @return 0 if successfully installed. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6931   */\n 6932  public class Layer:public int SetAttributeFilter(String filter_string)\n ....\n 6943   @param feature the feature to write.\n 6944  \n 6945:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6946  \n 6947   @see #CreateFeature(Feature)\n ....\n 6968   to seek.\n 6969  \n 6970:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 6971  */\n 6972  public class Layer:public int SetNextByIndex(long new_index)\n ....\n 7034  is only returned if an error occurs while attempting to flush to disk.\n 7035  \n 7036: @return 0 if no error occurs (even if nothing is done). Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7037  */\n 7038  public class Layer:public int SyncToDisk()\n ....\n 7042   a transaction.\n 7043   <p>\n 7044:  If starting the transaction fails, will throw a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7045   Datasources which do not support transactions will always return 0.\n 7046  \n 7047:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7048  */\n 7049  public class Layer:public int StartTransaction()\n ....\n 7053   transaction.\n 7054   <p>\n 7055:  If no transaction is active, or the commit fails, will throw a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7056   Datasources which do not support transactions will always return 0.\n 7057  \n 7058:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7059  */\n 7060  public class Layer:public int CommitTransaction()\n ....\n 7065   back a datasource to its state before the start of the current transaction.\n 7066   <p>\n 7067:  If no transaction is active, or the rollback fails, will throw a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7068   Datasources which do not support transactions will always return 0.\n 7069  \n 7070:  @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7071  */\n 7072  public class Layer:public int RollbackTransaction()\n ....\n 7198   * @param callback a callback function for reporting progress or null.\n 7199   *\n 7200:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7201   *\n 7202   * @since OGR 1.10\n ....\n 7259   * @param callback a callback function for reporting progress or null.\n 7260   *\n 7261:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7262   *\n 7263   * @since OGR 1.10\n ....\n 7319   * @param callback a callback function for reporting progress or null.\n 7320   *\n 7321:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7322   *\n 7323   * @since OGR 1.10\n ....\n 7377   * @param callback a callback function for reporting progress or null.\n 7378   *\n 7379:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7380   *\n 7381   * @since OGR 1.10\n ....\n 7438   * @param callback a callback function for reporting progress or null.\n 7439   *\n 7440:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7441   *\n 7442   * @since OGR 1.10\n ....\n 7491   * @param callback a callback function for reporting progress or null.\n 7492   *\n 7493:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7494   *\n 7495   * @since OGR 1.10\n ....\n 7544   * @param callback a callback function for reporting progress or null.\n 7545   *\n 7546:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7547   *\n 7548   * @since OGR 1.10\n ....\n 7878   * @param fid the new feature identifier value to assign.\n 7879   *\n 7880:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 7881   */\n 7882  public class Feature:public int SetFID(long fid)\n ....\n 8042   *\n 8043   * @return 0 if the operation succeeds, even if some values are\n 8044:  * not transferred, otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 8045   *\n 8046   * @see #SetFromWithMap(org.gdal.ogr.Feature srcFeature, int forgiving, int[] map)\n ....\n 8083   *\n 8084   * @return 0 if the operation succeeds, even if some values are\n 8085:  * not transferred, otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 8086   *\n 8087   * @since OGR 1.8.0\n ....\n 8103   * without assigning new one.\n 8104   *\n 8105:  * @return 0 if successful, or throws a RuntimeException (or an error code if DontUseExceptions() has been called) if\n 8106   * the geometry type is illegal for the FeatureDefn (checking not yet\n 8107   * implemented).\n ....\n 8120   * without assigning new one.\n 8121   *\n 8122:  * @return 0 if successful, or throws a RuntimeException (or an error code if DontUseExceptions() has been called) if\n 8123   * the geometry type is illegal for the FeatureDefn (checking not yet\n 8124   * implemented).\n ....\n 8219   * @param other geometry to add to the container.\n 8220   *\n 8221:  * @return 0 if successful, or throws RuntimeException (or an error code if DontUseExceptions() has been called) if\n 8222   * the geometry type is illegal for the type of geometry container.\n 8223   */\n ....\n 8240   * @param other geometry to add to the container.\n 8241   *\n 8242:  * @return 0 if successful, or throws RuntimeException (or an error code if DontUseExceptions() has been called) if\n 8243   * the geometry type is illegal for the type of geometry container.\n 8244   */\n ....\n 8635   *               respectively.\n 8636   *\n 8637:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 8638   */\n 8639  public class Geometry:public int ExportToWkb(byte[] wkbArray, int byte_order)\n ....\n 9241   * @param srs spatial reference system to transform to.\n 9242   *\n 9243:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 9244   */\n 9245  public class Geometry:public int TransformTo(SpatialReference srs)\n ....\n 9263   * @param ct the transformation to apply.\n 9264   *\n 9265:  * @return 0 on success. Otherwise throws a RuntimeException (or an error code if DontUseExceptions() has been called).\n 9266   */\n 9267  public class Geometry:public int Transform(CoordinateTransformation ct)\n ....\n 9663   * <p>\n 9664   * This is the default behaviour : methods that in C/C++ return an OGRErr return code\n 9665:  * would throw a RuntimeException() in case the code it is different\n 9666   * from ogr.OGRERR_NONE. By calling this method, you can get\n 9667   * back to that original state if DontUseExceptions() was called in-between.\n ....\n 9676   * <p>\n 9677   * By default, methods that in C/C++ return an OGRErr return code\n 9678:  * would throw a RuntimeException() in case the code it is different\n 9679   * from ogr.OGRERR_NONE. By calling this method, you can prevent\n 9680:  * the exception to be thrown and get the original error code\n 9681   * (ogr.OGRERR_* codes)\n 9682   * This will only apply to the org.gdal.ogr.* package.\n ....\n 10206   * If it success the OGRSpatialReference is updated in place, and the\n 10207   * method return 0.  If the method fails to identify the\n 10208:  * general coordinate system, a RuntimeException() will be throwned\n 10209   *\n 10210:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10211   */\n 10212  public class SpatialReference:public int AutoIdentifyEPSG()\n .....\n 10236   * @param src_srs the spatial reference to copy the GEOGCS information from.\n 10237   *\n 10238:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10239   */\n 10240  public class SpatialReference:public int CopyGeogCSFrom(SpatialReference src_srs)\n .....\n 10253   *\n 10254   * @param argout an already allocated array of 1 string to receive the output\n 10255:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10256   */\n 10257  public class SpatialReference:public int ExportToMICoordSys(String[] argout)\n .....\n 10274   * projection parameters will be assigned. See importFromPCI() for the list of parameters.\n 10275   *\n 10276:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10277   */\n 10278  public class SpatialReference:public int ExportToPCI(String[] proj, String[] units, double[] parms)\n .....\n 10343   * @param argout an already allocated array of 1 string to receive the PROJ.4 definition\n 10344   *\n 10345:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10346   */\n 10347  public class SpatialReference:public int ExportToProj4(String[] argout)\n .....\n 10361   * @param datum an already allocated array of 1 integer to receive the datum code.\n 10362   *\n 10363:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10364   */\n 10365  \n .....\n 10425   * @param dialect currently ignored. The dialect used is GML based.\n 10426   *\n 10427:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10428   */\n 10429  public class SpatialReference:public int ExportToXML(String[] argout, String dialect)\n .....\n 10447   * </ul>\n 10448   *\n 10449:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10450   */\n 10451  public class SpatialReference:public int Fixup()\n .....\n 10459   * method attempts to massage things back into the required order.\n 10460   *\n 10461:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10462   */\n 10463  public class SpatialReference:public int FixupOrdering()\n .....\n 10676   * @param argout allocated array of 7 doubles into which up to 7 coefficients are placed.\n 10677   *\n 10678:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10679   */\n 10680  public class SpatialReference:public int GetTOWGS84(double[] argout)\n .....\n 10704   * @param nCode a GCS or PCS code from the horizontal coordinate system table.\n 10705   *\n 10706:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10707   */\n 10708  public class SpatialReference:public int ImportFromEPSG(int nCode)\n .....\n 10730   * @param ppszInput vector of strings containing the definition.\n 10731   *\n 10732:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10733   */\n 10734  public class SpatialReference:public int ImportFromESRI(java.util.Vector ppszInput)\n .....\n 10741   * @param coord_sys Mapinfo style CoordSys definition string.\n 10742   *\n 10743:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10744   */\n 10745  public class SpatialReference:public int ImportFromMICoordSys(String coord_sys)\n .....\n 10805   * used (i.e., zeroes).\n 10806   *\n 10807:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10808   */\n 10809  public class SpatialReference:public int ImportFromPCI(String proj, String units, double[] prjParams)\n .....\n 10851   * @param proj4 the PROJ.4 style string.\n 10852   *\n 10853:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10854   */\n 10855  public class SpatialReference:public int ImportFromProj4(String proj4)\n .....\n 10863   * @param url text definition to try to deduce SRS from.\n 10864   *\n 10865:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 10866   */\n 10867  public class SpatialReference:public int ImportFromUrl(String url)\n .....\n 11120   * @param iDatum Input spheroid.\n 11121   *\n 11122:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11123   */\n 11124  public class SpatialReference:public int ImportFromUSGS(int iProjSys, int iZone, double[] padfPrjParams, int iDatum)\n .....\n 11134   * @param wkt WKT string\n 11135   *\n 11136:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11137   */\n 11138  public class SpatialReference:public int ImportFromWkt(String wkt)\n .....\n 11143   * @param xmlString XML string to import\n 11144   *\n 11145:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11146   */\n 11147  public class SpatialReference:public int ImportFromXML(String xmlString)\n .....\n 11236   * translation of EPSG to WKT for the CT specification.\n 11237   *\n 11238:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11239   */\n 11240  public class SpatialReference:public int MorphFromESRI()\n .....\n 11248   * nodes note recognised by ESRI (like AUTHORITY and AXIS).\n 11249   *\n 11250:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11251   */\n 11252  public class SpatialReference:public int MorphToESRI()\n .....\n 11265   * be found in ogr_srs_api.h.\n 11266   *\n 11267:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11268   */\n 11269  public class SpatialReference:public int SetAngularUnits(String name, double to_radians)\n .....\n 11283   * path.\n 11284   *\n 11285:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11286   */\n 11287  public class SpatialReference:public int SetAttrValue(String name, String value)\n .....\n 11297   * @param code code for value with this authority.\n 11298   *\n 11299:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11300   */\n 11301  public class SpatialReference:public int SetAuthority(String target_key, String authority, int code)\n .....\n 11333   * @param definition text definition to try to deduce SRS from.\n 11334   *\n 11335:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11336   */\n 11337  public class SpatialReference:public int SetFromUserInput(String definition)\n .....\n 11358   * @param name the user visible name to assign. Not used as a key. May be null\n 11359   *\n 11360:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11361   *\n 11362   * @since OGR 1.9.0\n .....\n 11445   * pszAngularUnits is null.\n 11446   *\n 11447:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11448   */\n 11449  public class SpatialReference:public int SetGeogCS(String pszGeogName, String pszDatumName, String pszSpheroidName, double dfSemiMajor, double dfInvFlattening, String pszPMName, double dfPMOffset, String pszAngularUnits, double dfConvertToRadians)\n .....\n 11463   * be found in ogr_srs_api.h.\n 11464   *\n 11465:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11466   */\n 11467  public class SpatialReference:public int SetLinearUnits(String name, double to_meters)\n .....\n 11483   * be found in ogr_srs_api.h.\n 11484   *\n 11485:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11486   */\n 11487  public class SpatialReference:public int SetLinearUnitsAndUpdateParameters(String name, double to_meters)\n .....\n 11495   * @param name the user visible name to assign.  Not used as a key.\n 11496   *\n 11497:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11498   */\n 11499  public class SpatialReference:public int SetLocalCS(String name)\n .....\n 11512   * @param val value to assign.\n 11513   *\n 11514:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11515   */\n 11516  public class SpatialReference:public int SetNormProjParm(String name, double val)\n .....\n 11534   * @param name the user visible name to assign.  May be null\n 11535   *\n 11536:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11537   */\n 11538  public class SpatialReference:public int SetProjCS(String name)\n .....\n 11544   * the macros in ogr_srs_api.h, such as SRS_PT_TRANSVERSE_MERCATOR.\n 11545   *\n 11546:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11547   */\n 11548  public class SpatialReference:public int SetProjection(String name)\n .....\n 11561   * @param val value to assign.\n 11562   *\n 11563:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11564   */\n 11565  public class SpatialReference:public int SetProjParm(String name, double val)\n .....\n 11618   * the legal definition for this zone.\n 11619   *\n 11620:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11621   */\n 11622  public class SpatialReference:public int SetStatePlane(int zone, int is_nad83, String unitsname, double units)\n .....\n 11638   * be found in ogr_srs_api.h.\n 11639   *\n 11640:  * @return OGRERR_NONE on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11641   *\n 11642   * @since OGR 1.9.0\n .....\n 11675   * @param dfPPM scaling factor (parts per million).\n 11676   *\n 11677:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11678   */\n 11679  public class SpatialReference:public int SetTOWGS84(double dfDX, double dfDY, double dfDZ, double dfEX, double dfEY, double dfEZ, double dfPPM)\n .....\n 11703   * hemisphere.\n 11704   *\n 11705:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11706   */\n 11707  public class SpatialReference:public int SetUTM(int zone, int north)\n .....\n 11732   * @param VertDatumType the OGC vertical datum type, usually 2005.\n 11733   *\n 11734:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11735   *\n 11736   * @since OGR 1.9.0\n .....\n 11756   *\n 11757   * @param name name of well known geographic coordinate system.\n 11758:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11759   */\n 11760  public class SpatialReference:public int SetWellKnownGeogCS(String name)\n .....\n 11768   * specification.\n 11769   *\n 11770:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11771   */\n 11772  public class SpatialReference:public int StripCTParms()\n .....\n 11786   * comprehensive.\n 11787   *\n 11788:  * @return 0 on success. Otherwise throws a RuntimeException() (or an error code if DontUseExceptions() has been called).\n 11789   */\n 11790  public class SpatialReference:public int Validate()\n .....\n 11925   * <p>\n 11926   * This is the default behaviour : methods that in C/C++ return an OGRErr return code\n 11927:  * would throw a RuntimeException() in case the code it is different\n 11928   * from ogr.OGRERR_NONE. By calling this method, you can get\n 11929   * back to that original state if DontUseExceptions() was called in-between.\n .....\n 11938   * <p>\n 11939   * By default, methods that in C/C++ return an OGRErr return code\n 11940:  * would throw a RuntimeException() in case the code is different\n 11941   * from ogr.OGRERR_NONE. By calling this method, you can prevent\n 11942:  * the exception to be thrown and get the original error code\n 11943   * (ogr.OGRERR_* codes)\n 11944   * This will only apply to the org.gdal.osr.* package.\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\apps\\gdalmajorobject.java:\n   45          ds.SetDescription(\"RasterAttributeTable\");\n   46          if (!ds.GetDescription().equals(\"RasterAttributeTable\"))\n   47:             throw new RuntimeException();\n   48  \n   49          ds.SetMetadataItem(\"key\", \"value\");\n   50          if (!ds.GetMetadataItem(\"key\").equals(\"value\"))\n   51:             throw new RuntimeException();\n   52  \n   53          Vector v = ds.GetMetadata_List();\n   54          if (!((String)v.elementAt(0)).equals(\"key=value\"))\n   55:             throw new RuntimeException();\n   56  \n   57          Hashtable h = ds.GetMetadata_Dict();\n   58          if (!h.get(\"key\").equals(\"value\"))\n   59:             throw new RuntimeException();\n   60  \n   61          ds.delete();\n   ..\n   64          ds.SetMetadata(\"key=value\");\n   65          if (!ds.GetMetadataItem(\"key\").equals(\"value\"))\n   66:             throw new RuntimeException();\n   67  \n   68          ds.delete();\n   ..\n   73          ds.SetMetadata(h);\n   74          if (!ds.GetMetadataItem(\"key\").equals(\"value\"))\n   75:             throw new RuntimeException();\n   76          else\n   77              System.out.println(\"Success\");\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\apps\\GDALTestIO.java:\n  137                          int val = byteBuffer.getInt(j*4);\n  138                          if (val != (i + j))\n  139:                             throw new RuntimeException(\"Bad value for (\" + j + \",\" + i + \") : \" + val);\n  140                      }\n  141                  }\n  ...\n  148                          int val = intArray[j];\n  149                          if (val != (i + j))\n  150:                             throw new RuntimeException(\"Bad value for (\" + j + \",\" + i + \") : \" + val);\n  151                      }\n  152                  }\n  ...\n  160      }\n  161  \n  162:     public static void main(String[] args) throws InterruptedException\n  163      {\n  164          gdal.AllRegister();\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\apps\\gdaltransformer.java:\n   61          int ret = t.TransformPoint(0, argout);\n   62          if (ret == 0)\n   63:             throw new RuntimeException();\n   64          System.out.println(\"x=\" + argout[0] + \" y=\" + argout[1]);\n   65  \n   66          ret = t.TransformPoint(1, argout);\n   67          if (ret == 0)\n   68:             throw new RuntimeException();\n   69          System.out.println(\"x=\" + argout[0] + \" y=\" + argout[1]);\n   70  \n   71          ret = t.TransformPoint(argout, 0, 0, 0, 0);\n   72          if (ret == 0)\n   73:             throw new RuntimeException();\n   74          System.out.println(\"x=\" + argout[0] + \" y=\" + argout[1]);\n   75  \n   76          ret = t.TransformPoint(argout, 0, 0, 0);\n   77          if (ret == 0)\n   78:             throw new RuntimeException();\n   79          System.out.println(\"x=\" + argout[0] + \" y=\" + argout[1]);\n   80  \n   ..\n   82          ret = t.TransformPoints(0, arrayOfPoints, null);\n   83          if (ret == 0)\n   84:             throw new RuntimeException();\n   85          System.out.println(\"x=\" + arrayOfPoints[0][0] + \" y=\" + arrayOfPoints[0][1]);\n   86          System.out.println(\"x=\" + arrayOfPoints[1][0] + \" y=\" + arrayOfPoints[1][1]);\n   ..\n   88          ret = t.TransformPoints(1, arrayOfPoints, null);\n   89          if (ret == 0)\n   90:             throw new RuntimeException();\n   91          System.out.println(\"x=\" + arrayOfPoints[0][0] + \" y=\" + arrayOfPoints[0][1]);\n   92          System.out.println(\"x=\" + arrayOfPoints[1][0] + \" y=\" + arrayOfPoints[1][1]);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\apps\\multireadtest.java:\n   51      }\n   52  \n   53:     public static void main(String[] args) throws InterruptedException\n   54      {\n   55          String filename = args[0];\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\java\\apps\\OSRTest.java:\n   32  \n   33  public class OSRTest {\n   34:       public static void main(String[] args) throws Exception {\n   35            SpatialReference srs = new SpatialReference(null);\n   36            srs.ImportFromEPSGA(4326);\n   37            if( !srs.GetAxisName(null, 0).equals(\"Geodetic latitude\"))\n   38:               throw new Exception(\"srs.GetAxisName(null, 0) = \" + srs.GetAxisName(null, 0));\n   39            if( srs.GetAxisOrientation(null, 0) != org.gdal.osr.osr.OAO_North)\n   40:               throw new Exception(\"srs.GetAxisName(null, 0) = \" + srs.GetAxisName(null, 0));\n   41        }\n   42  }\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\perl\\index.dox:\n   92  \\endcode\n   93  \n   94: Many of the methods may throw an error, which can be caught by putting\n   95  the call into eval{}; and then examining the contents of $\\@.\n   96  \n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\setup.py:\n  250              return fetch_config(option, gdal_config=self.gdal_config)\n  251          except gdal_config_error:\n  252:             # If an error is thrown, it is possibly because\n  253              # the gdal-config location given in setup.cfg is\n  254              # incorrect, or possibly the default -- ../../apps/gdal-config\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\extensions\\gdal_wrap.cpp:\n 3270    /*\n 3271    ** Generally we want to suppress error reporting if we have exceptions\n 3272:   ** enabled as the error message will be in the exception thrown in\n 3273    ** Python.\n 3274    */\n ....\n 6092                                                     0 );\n 6093    if (ds == 0) {\n 6094:     /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/\n 6095    }\n 6096    return ds;\n ....\n 12104        if ( size > 0 && size == (int)size) {\n 12105  #if PY_VERSION_HEX < 0x03000000\n 12106:         // PyMapping_Items also work with python 2.x  but throws a warning about\n 12107          // -Wwrite-strings warning\n 12108          PyObject *item_list = PyObject_CallMethod(obj1,const_cast<char*>(\"items\"),NULL);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\extensions\\gnm_wrap.cpp:\n 3189    /*\n 3190    ** Generally we want to suppress error reporting if we have exceptions\n 3191:   ** enabled as the error message will be in the exception thrown in\n 3192    ** Python.\n 3193    */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\extensions\\ogr_wrap.cpp:\n 3254    /*\n 3255    ** Generally we want to suppress error reporting if we have exceptions\n 3256:   ** enabled as the error message will be in the exception thrown in\n 3257    ** Python.\n 3258    */\n ....\n 5030        return CreateGeometryFromGML( gml );\n 5031      }\n 5032:     // throw?\n 5033      else {\n 5034          CPLError(CE_Failure, 1, \"Empty geometries cannot be constructed\");\n ....\n 7489        if ( size > 0 && size == (int)size) {\n 7490  #if PY_VERSION_HEX < 0x03000000\n 7491:         // PyMapping_Items also work with python 2.x  but throws a warning about\n 7492          // -Wwrite-strings warning\n 7493          PyObject *item_list = PyObject_CallMethod(obj1,const_cast<char*>(\"items\"),NULL);\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\extensions\\osr_wrap.cpp:\n 3221    /*\n 3222    ** Generally we want to suppress error reporting if we have exceptions\n 3223:   ** enabled as the error message will be in the exception thrown in\n 3224    ** Python.\n 3225    */\n\nD:\\code\\perso\\tabGraph\\libs\\gdal\\gdal\\swig\\python\\samples\\densify.py:\n  246                      threshold = float(d) / math.ceil(d / threshold)\n  247                  else:\n  248:                     # duplicate point... throw it out\n  249                      continue\n  250              if d > threshold:\n\nD:\\code\\perso\\tabGraph\\src\\Cubemap.cpp:\n  183          return (t);\n  184      } catch (std::exception& e) {\n  185:         throw std::runtime_error(std::string(\"Error parsing Cubemap : \" + path + name + \" :\\n\\t\") + e.what());\n  186      }\n  187      return (nullptr);\n\nD:\\code\\perso\\tabGraph\\src\\Framebuffer.cpp:\n  245  {\n  246      if (color_attachement >= _color_attachements.size())\n  247:         throw std::runtime_error(name() + \" : Color attachement index is out of bound\");\n  248      _color_attachements[color_attachement] = texture;\n  249      bind();\n\nD:\\code\\perso\\tabGraph\\src\\Shader.cpp:\n  259          check_program(_program);\n  260      } catch (std::exception& e) {\n  261:         throw std::runtime_error(std::string(\"Linking Error :\\n\") + e.what());\n  262      }\n  263      return (_program);\n  ...\n  287          check_program(_program);\n  288      } catch (std::exception& e) {\n  289:         throw std::runtime_error(std::string(\"Linking Error :\\n\") + e.what());\n  290      }\n  291      return (_program);\n  ...\n  305          check_program(_program);\n  306      } catch (std::exception& e) {\n  307:         throw std::runtime_error(std::string(\"Linking Error :\\n\") + e.what());\n  308      }\n  309      return (_program);\n  ...\n  325          check_program(_program);\n  326      } catch (std::exception& e) {\n  327:         throw std::runtime_error(std::string(\"Linking Error :\\n\") + e.what());\n  328      }\n  329      return (_program);\n  ...\n  342              char log[loglength];\n  343              glGetShaderInfoLog(id, loglength, nullptr, &log[0]);\n  344:             throw std::runtime_error(log);\n  345          } else {\n  346:             throw std::runtime_error(\"Unknown Error\");\n  347          }\n  348      }\n  ...\n  362          char log[loglength];\n  363          glGetProgramInfoLog(id, loglength, nullptr, &log[0]);\n  364:         throw std::runtime_error(log);\n  365      }\n  366      glCheckError();\n\nD:\\code\\perso\\tabGraph\\src\\Terrain.cpp:\n  165          if ((readSize = fread(&header, 1, sizeof(BTHeader), fd) != sizeof(BTHeader))) {\n  166              fclose(fd);\n  167:             throw std::runtime_error(std::string(\"[ERROR] \") + path + \" : \" +\n  168                  \"Invalid file header, expected size \" + std::to_string(sizeof(BTHeader)) + \" got \" + std::to_string(readSize));\n  169          }\n\nD:\\code\\perso\\tabGraph\\src\\Terrain_GDAL.cpp:\n  144      auto data = (GDALDataset*)GDALOpen(path.c_str(), GA_ReadOnly );\n  145      if (data == nullptr) {\n  146:         throw (\"Could not open \" + path);\n  147      }\n  148      auto    band = data->GetRasterBand(1);\n\nD:\\code\\perso\\tabGraph\\src\\TextureParser.cpp:\n   67  \tauto surface = IMG_Load(path.c_str());\n   68      if(!surface || !surface->format)\n   69:         throw std::runtime_error(std::string(\"Error parsing \") + path + \" : \" + SDL_GetError());\n   70      auto  textureFormat = surface->format->Amask ? GL_RGBA : GL_RGB;\n   71      auto  textureInternalFormat = surface->format->Amask ? GL_COMPRESSED_RGBA : GL_COMPRESSED_RGB;\n\nD:\\code\\perso\\tabGraph\\src\\Window.cpp:\n   59  {\n   60      if (SDL_Init(SDL_INIT_EVERYTHING) < 0) {\n   61:         throw std::runtime_error(SDL_GetError());\n   62      }\n   63      SDL_JoystickEventState(SDL_ENABLE);\n   ..\n   73              SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN | SDL_WINDOW_ALLOW_HIGHDPI | SDL_WINDOW_RESIZABLE);\n   74      if (_get()._sdl_window == nullptr) {\n   75:         throw std::runtime_error(SDL_GetError());\n   76      }\n   77      _get()._gl_context = SDL_GL_CreateContext(_get()._sdl_window);\n   78      if (_get()._gl_context == nullptr) {\n   79:         throw std::runtime_error(SDL_GetError());\n   80      }\n   81      _get()._clear_mask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT;\n   ..\n   83      auto error = glewInit();\n   84      if (error != GLEW_OK) {\n   85:         throw std::runtime_error(reinterpret_cast<const char*>(glewGetErrorString(error)));\n   86      }\n   87      glEnable(GL_MULTISAMPLE);\n\nD:\\code\\perso\\tabGraph\\src\\parser\\BMP.cpp:\n   82  \n   83      if (access(path.c_str(), R_OK) != 0) {\n   84:         throw std::runtime_error(strerror(errno));\n   85      }\n   86      if ((p->fd = fopen(path.c_str(), \"rb\")) == nullptr) {\n   87:         throw std::runtime_error(strerror(errno));\n   88      }\n   89      auto readReturn = fread(&p->header, 1, sizeof(p->header), p->fd);\n   90      if (readReturn != sizeof(p->header) || p->header.type != 0x4D42) {\n   91          fclose(p->fd);\n   92:         throw std::runtime_error(\"Wrong Header\");\n   93      }\n   94      readReturn = fread(&p->info, 1, sizeof(p->info), p->fd);\n   95      if (readReturn != sizeof(p->info)) {\n   96          fclose(p->fd);\n   97:         throw std::runtime_error(\"Wrong Info\");\n   98      }\n   99      if (p->info.width * p->info.bpp / 8 % 2)\n  ...\n  136          read_data(&parser, path);\n  137      } catch (std::exception& e) {\n  138:         throw std::runtime_error(std::string(\"Error parsing \") + path + \" : \" + e.what());\n  139      }\n  140      get_format(parser.info.bpp, &format[0], &format[1]);\n\nD:\\code\\perso\\tabGraph\\src\\parser\\BT.cpp:\n   22      if ((readSize = fread(&header, 1, sizeof(BTHeader), fd) != sizeof(BTHeader))) {\n   23          fclose(fd);\n   24:         throw std::runtime_error(std::string(\"[ERROR] \") + path + \" : \" +\n   25              \"Invalid file header, expected size \" + std::to_string(sizeof(BTHeader)) + \" got \" + std::to_string(readSize));\n   26      }\n   ..\n   35      else {\n   36          fclose(fd);\n   37:         throw std::runtime_error(std::string(\"[ERROR] \") + path + \" : \" + \n   38              \"Invalid data size \" + std::to_string(header.dataSize));\n   39      }\n   ..\n   42      if ((readSize = fread(data, 1, totalSize, fd) != totalSize)) {\n   43          fclose(fd);\n   44:         throw std::runtime_error(std::string(\"[ERROR] \") + path + \" : \" +\n   45              \"Invalid map size, expected size \" + std::to_string(totalSize) + \" got \" + std::to_string(readSize));\n   46      }\n\nD:\\code\\perso\\tabGraph\\src\\parser\\FBX.cpp:\n  210          break;\n  211      default:\n  212:         throw std::runtime_error(std::string(\"Unknown FBX property type at \") + std::to_string(ftell(fd)));\n  213      }\n  214      return (property);\n  ...\n  269  \n  270      if (access(path.c_str(), R_OK) != 0) {\n  271:         throw std::runtime_error(std::string(\"Can't access \") + path + \" : \" + strerror(errno));\n  272      }\n  273      if ((fd = fopen(path.c_str(), \"rb\")) == nullptr) {\n  274:         throw std::runtime_error(std::string(\"Can't open \") + path + \" : \" + strerror(errno));\n  275      }\n  276      document.path = path;\n  277      fread(&document.header, sizeof(FBXHeader), 1, fd);\n  278      if (strncmp(document.header.fileMagic, \"Kaydara FBX Binary  \", 20))\n  279:         throw std::runtime_error(\"Invalid FBX header at : \" + path);\n  280      is64bits = document.header.version >= 7500;\n  281      for (FBXNode* node = nullptr; (node = ParseNode(fd)) != nullptr;)\n\nD:\\code\\perso\\tabGraph\\src\\parser\\GLSL.cpp:\n   45  {\n   46      if (access(path.c_str(), R_OK) != 0) {\n   47:         throw std::runtime_error(std::string(\"Can't access \") + path + \" : \" + strerror(errno));\n   48      }\n   49      return (compile_shader_code(file_to_str(path), type));\n   ..\n   62          shader->link(vertexid, fragmentid);\n   63      } catch (std::exception& e) {\n   64:         throw std::runtime_error(std::string(\"Error compiling \") + name + \" :\\n\" + e.what());\n   65      }\n   66      shader->_uniforms = shader->_get_variables(GL_ACTIVE_UNIFORMS);\n   ..\n  100          shader->link(vertexid, fragmentid);\n  101      } catch (std::exception& e) {\n  102:         throw std::runtime_error(std::string(\"Error parsing \") + name + \" :\\n\" + e.what());\n  103      }\n  104      shader->_uniforms = shader->_get_variables(GL_ACTIVE_UNIFORMS);\n  ...\n  151  \n  152      } catch (std::exception& e) {\n  153:         throw std::runtime_error(std::string(\"Error parsing \") + name + \" :\\n\" + e.what());\n  154      }\n  155      shader->_uniforms = shader->_get_variables(GL_ACTIVE_UNIFORMS);\n\nD:\\code\\perso\\tabGraph\\src\\parser\\HDR.cpp:\n   41      file = fopen(path.c_str(), \"rb\");\n   42      if (!file)\n   43:         throw std::runtime_error(\"Invalid File\");\n   44      fread(str, 10, 1, file);\n   45      if (memcmp(str, \"#?RADIANCE\", 10)) {\n   46          fclose(file);\n   47:         throw std::runtime_error(\"Invalid Header\");\n   48      }\n   49      fseek(file, 1, SEEK_CUR);\n   ..\n   69      if (!sscanf(reso, \"-Y %ld +X %ld\", &h, &w)) {\n   70          fclose(file);\n   71:         throw std::runtime_error(\"Invalid Resolution\");\n   72      }\n   73      size.x = w;\n   ..\n   78      if (!scanline) {\n   79          fclose(file);\n   80:         throw std::runtime_error(\"Invalid Scanline\");\n   81      }\n   82      std::cout << \".\" << std::flush;\n\nD:\\code\\perso\\tabGraph\\src\\parser\\MTLLIB.cpp:\n  103  \n  104      if (access(path.c_str(), R_OK) != 0) {\n  105:         throw std::runtime_error(std::string(\"Can't access \") + path + \" : \" + strerror(errno));\n  106      }\n  107      if ((p.fd = fopen(path.c_str(), \"r\")) == nullptr) {\n  108:         throw std::runtime_error(std::string(\"Can't open \") + path + \" : \" + strerror(errno));\n  109      }\n  110      p.path_split = split_path(path);\n\nD:\\code\\perso\\tabGraph\\src\\parser\\OBJ.cpp:\n  359  \n  360      if (access(path.c_str(), R_OK) != 0) {\n  361:         throw std::runtime_error(std::string(\"Can't access \") + path + \" : \" + strerror(errno));\n  362      }\n  363      if ((p->fd = fopen(path.c_str(), \"r\")) == nullptr) {\n  364:         throw std::runtime_error(std::string(\"Can't open \") + path + \" : \" + strerror(errno));\n  365      }\n  366      p->parent = Mesh::create(name);\n  ...\n  375          parse_vg(p);\n  376      } else {\n  377:         throw std::runtime_error(std::string(\"Invalid OBJ\"));\n  378      }\n  379  }\n  ...\n  387          start_obj_parsing(&p, name, path);\n  388      } catch (std::exception& e) {\n  389:         throw std::runtime_error(std::string(\"Error parsing \") + name + \" :\\n\" + e.what());\n  390          return (nullptr);\n  391      }\n\nD:\\code\\perso\\tabGraph\\src\\parser\\tools.cpp:\n  157      FILE    *fd;\n  158      if (access(path.c_str(), R_OK) != 0) {\n  159:         throw std::runtime_error(std::string(\"Can't access \") + path + \" : \" + strerror(errno));\n  160      }\n  161      if ((fd = fopen(path.c_str(), mod.c_str())) == nullptr) {\n  162:         throw std::runtime_error(std::string(\"Can't open \") + path + \" : \" + strerror(errno));\n  163      }\n  164      return fd;\n\n1493 matches across 154 files\n",
			"settings":
			{
				"buffer_size": 187824,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "include/Camera.hpp",
			"settings":
			{
				"buffer_size": 1591,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/scop42/main.cpp",
			"settings":
			{
				"buffer_size": 3425,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"instak",
				"Package Control: Install Package"
			],
			[
				"pretty",
				"Pretty JSON: Validate"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inden",
				"Indent XML"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/code/perso/tabGraph",
		"/D/code/perso/tabGraph/scripts",
		"/D/code/perso/tabGraph/src",
		"/D/code/perso/tabGraph/tests",
		"/D/code/perso/tabGraph/tests/scop42",
		"/D/code/perso/tabGraph/tests/terrain",
		"/D/code/perso/tabGraph/tests/terrain/obj"
	],
	"file_history":
	[
		"/C/msys64/mingw64/share/proj/nad.lst",
		"/D/code/perso/tabGraph/libs/gdal/autotest/cpp/gdal_unit_test.cpp",
		"/D/code/perso/tabGraph/src/Terrain.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioDistantClient.cpp",
		"/D/code/project/studio-4.2/application/Studio/Engine.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioClient.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioServer.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioServer.h",
		"/D/code/project/studio-4.2/Studio.pro",
		"/D/code/project/studio-4.2/include/misc/ClientManager.h",
		"/D/code/project/studio-4.2/application/Studio/StudioPeriph.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioPeriph.h",
		"/D/code/project/studio-4.2/application/Studio/StudioLocalClient.cpp",
		"/D/code/project/studio-4.2/application/Studio/StudioLegacyHandler.h",
		"/D/code/project/studio-4.2/plugin/misc/MiscPlugin.cpp",
		"/D/code/project/studio-4.2/src/misc/ProtocolPrivate.h",
		"/D/code/project/studio-4.2/src/misc/ServerManager.cpp",
		"/D/code/project/studio-4.2/plugin/plugin.pro",
		"/D/code/project/studio-4.2/application/Studio/Studio.pro",
		"/D/code/project/studio-4.2/src/CMakeLists.txt",
		"/D/code/project/studio-4.2/src/conf/ServerManager.cpp",
		"/D/code/project/studio-4.2/application/Studio/CMakeLists.txt",
		"/D/code/project/studio-4.2/application/Studio/StudioClient.h",
		"/D/code/project/studio-4.2/plugin/conf/CMakeLists.txt",
		"/D/code/project/studio-4.2/CMakeLists.txt",
		"//10.0.5.4/Technique/Divers/Drivers/Imprimantes/Ricoh/MP C2003/README.txt",
		"/D/code/perso/tabGraph/tests/terrain/main.cpp",
		"/D/code/project/studio-4.2/tools/env_config.cmd",
		"/C/Users/gpi/Downloads/Studio-20190506-151831.log",
		"/D/code/project/osgRsa/osgRsa-4.2/tools/env/env_config.cmd",
		"/D/code/project/Network-2.4/tools/env_config.cmd",
		"/D/code/project/studio/tools/env_config.cmd",
		"/D/code/project/Network-2.4/tools/vars.bat",
		"/D/code/project/studio-4.2/tools/vars.bat",
		"/D/code/perso/tabGraph/tests/terrain/scop.hpp",
		"/D/code/perso/tabGraph/tests/scop42/Makefile",
		"/D/code/perso/tabGraph/tests/scop42/build/glew32.dll",
		"/D/code/perso/tabGraph/tests/scop42/build/SDL2.dll",
		"/D/code/perso/tabGraph/tests/scop42/build/.vs/Scop/v14/.suo",
		"/D/code/perso/tabGraph/tests/scop42/build/res/config.ini",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/0a/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/0a/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/city/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/city/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/ennis/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/ennis/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/esplanade/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/esplanade/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/giuseppe/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/giuseppe/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/grace/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/grace/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/lythwood/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/lythwood/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/milkyway/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/milkyway/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/swiss/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/swiss/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/uffizi/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/hdr/uffizi/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/build/res/obj/chart.mtl",
		"/D/code/perso/tabGraph/tests/scop42/build/res/obj/chart.obj",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/city/light/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/hell/light/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/museum/light/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/park/light/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/X+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/X-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/Y+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/Y-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/Z+.bmp",
		"/D/code/perso/tabGraph/tests/scop42/build/res/skybox/zcol_whiteside/light/Z-.bmp",
		"/D/code/perso/tabGraph/tests/scop42/obj/callbacks.o",
		"/D/code/perso/tabGraph/tests/scop42/obj/main.o",
		"/D/code/perso/tabGraph/tests/scop42/res/config.ini",
		"/D/code/perso/tabGraph/tests/scop42/res/hdr/0a/diffuse.hdr",
		"/D/code/perso/tabGraph/tests/scop42/res/hdr/0a/environment.hdr",
		"/D/code/perso/tabGraph/tests/scop42/res/hdr/city/diffuse.hdr"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"StudioCommandId",
			"o",
			"./ogr/",
			"/d/code/perso/tabGraph/libs/gdal/gdal/",
			"/d/code/perso/tabGraph/libs/gdal/gdal",
			"ljpeg",
			"liblzma",
			"pcraster",
			"png",
			"pcidsk",
			"libtiff",
			"geotiff",
			"jpeg",
			"gif",
			"qhull",
			"libjson",
			"qhull",
			"liblzma",
			"ARG",
			"internal",
			"TerrainData",
			"_terrainMap",
			"throw"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tests/terrain/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1089,
						"regions":
						{
						},
						"selection":
						[
							[
								750,
								750
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								3,
								27,
								13,
								38,
								46,
								12,
								72,
								230,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557730560.78,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Terrain_GDAL.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6081,
						"regions":
						{
						},
						"selection":
						[
							[
								1268,
								1268
							]
						],
						"settings":
						{
							"SL.109.region_keys":
							[
							],
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								5,
								10,
								14,
								2,
								10,
								0,
								26,
								96,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557731914.94,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 397.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": ".sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 415,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"SL.224.region_keys":
							[
							],
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								5,
								14,
								13,
								5,
								53,
								10,
								140,
								218,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1517,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Camera.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2935,
						"regions":
						{
						},
						"selection":
						[
							[
								308,
								308
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								2,
								22,
								16,
								13,
								28,
								8,
								143,
								4,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557831106.7,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "scripts/minimalGdal.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19039,
						"regions":
						{
						},
						"selection":
						[
							[
								2299,
								2299
							]
						],
						"settings":
						{
							"SL.199.region_keys":
							[
								"SL.shellcheck.Gutter.|region.redish markup.error.sublime_linter|dot",
								"sublime_linter.protected_regions",
								"SL.shellcheck.Gutter.|region.yellowish markup.warning.sublime_linter|dot",
								"SL.shellcheck.Highlights.|8bda80f5f197a0e3759df499e2790845ef36e16bc7960c6cd2f57ed247f4464e|region.redish markup.error.sublime_linter|32",
								"SL.shellcheck.Highlights.|7c7f508e88ed5bca8b3f2cfdb7a0c878c0aca2ae33d98b9fbb35abfa122e7d2d|region.yellowish markup.warning.sublime_linter|32"
							],
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								4,
								9,
								16,
								9,
								19,
								14,
								75,
								199,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557758734.15,
							"syntax": "Packages/ShellScript/Bash.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1053.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tests/terrain/build/terrain_test.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7901055,
						"regions":
						{
						},
						"selection":
						[
							[
								214215,
								214215
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								5,
								14,
								8,
								29,
								27,
								7,
								254,
								211,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557815384.64,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/code/project/studio-4.2/include/networkLegacy/CommandId.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 660,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"SL.201.region_keys":
							[
							],
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								5,
								14,
								9,
								27,
								5,
								10,
								250,
								30,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557818836.57,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Terrain.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6910,
						"regions":
						{
						},
						"selection":
						[
							[
								236,
								265
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								3,
								26,
								12,
								3,
								23,
								1,
								174,
								104,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557749911.41,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7510,
						"regions":
						{
						},
						"selection":
						[
							[
								4679,
								4684
							]
						],
						"settings":
						{
							"SL.182.region_keys":
							[
							],
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								2,
								15,
								13,
								29,
								9,
								9,
								179,
								123,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557749947.55,
							"syntax": "Packages/Makefile/Makefile.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2772.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4843,
						"regions":
						{
						},
						"selection":
						[
							[
								4090,
								4090
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								2,
								22,
								16,
								13,
								28,
								9,
								15,
								236,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557739575.76,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2934.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Render.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26039,
						"regions":
						{
						},
						"selection":
						[
							[
								5966,
								5983
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								2,
								22,
								16,
								13,
								28,
								10,
								248,
								52,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557739598.28,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3501.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 187824,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										202,
										207
									],
									[
										479,
										484
									],
									[
										758,
										763
									],
									[
										1102,
										1107
									],
									[
										1280,
										1285
									],
									[
										1448,
										1453
									],
									[
										1570,
										1575
									],
									[
										1786,
										1791
									],
									[
										1837,
										1842
									],
									[
										2069,
										2074
									],
									[
										2235,
										2240
									],
									[
										2475,
										2480
									],
									[
										2714,
										2719
									],
									[
										2867,
										2872
									],
									[
										2934,
										2939
									],
									[
										3136,
										3141
									],
									[
										3333,
										3338
									],
									[
										3470,
										3475
									],
									[
										3558,
										3563
									],
									[
										3677,
										3682
									],
									[
										3783,
										3788
									],
									[
										3948,
										3953
									],
									[
										4109,
										4114
									],
									[
										4216,
										4221
									],
									[
										4477,
										4482
									],
									[
										4621,
										4626
									],
									[
										4725,
										4730
									],
									[
										4863,
										4868
									],
									[
										4976,
										4981
									],
									[
										5081,
										5086
									],
									[
										5209,
										5214
									],
									[
										5383,
										5388
									],
									[
										5545,
										5550
									],
									[
										5722,
										5727
									],
									[
										5887,
										5892
									],
									[
										6051,
										6056
									],
									[
										6104,
										6109
									],
									[
										6230,
										6235
									],
									[
										6324,
										6329
									],
									[
										6542,
										6547
									],
									[
										6736,
										6741
									],
									[
										6930,
										6935
									],
									[
										7174,
										7179
									],
									[
										7292,
										7297
									],
									[
										7381,
										7386
									],
									[
										7475,
										7480
									],
									[
										7588,
										7593
									],
									[
										7673,
										7678
									],
									[
										7820,
										7825
									],
									[
										7905,
										7910
									],
									[
										8054,
										8059
									],
									[
										8139,
										8144
									],
									[
										8269,
										8274
									],
									[
										8354,
										8359
									],
									[
										8416,
										8421
									],
									[
										8471,
										8476
									],
									[
										8705,
										8710
									],
									[
										8748,
										8753
									],
									[
										8757,
										8762
									],
									[
										8975,
										8980
									],
									[
										9066,
										9071
									],
									[
										9306,
										9311
									],
									[
										9314,
										9319
									],
									[
										9492,
										9497
									],
									[
										9623,
										9628
									],
									[
										9862,
										9867
									],
									[
										10037,
										10042
									],
									[
										10199,
										10204
									],
									[
										10356,
										10361
									],
									[
										10566,
										10571
									],
									[
										10766,
										10771
									],
									[
										10968,
										10973
									],
									[
										11113,
										11118
									],
									[
										11302,
										11307
									],
									[
										11469,
										11474
									],
									[
										11581,
										11586
									],
									[
										11720,
										11725
									],
									[
										11885,
										11890
									],
									[
										12076,
										12081
									],
									[
										12392,
										12397
									],
									[
										12483,
										12488
									],
									[
										12648,
										12653
									],
									[
										12828,
										12833
									],
									[
										13038,
										13043
									],
									[
										13167,
										13172
									],
									[
										13307,
										13312
									],
									[
										13517,
										13522
									],
									[
										13929,
										13934
									],
									[
										14396,
										14401
									],
									[
										15072,
										15077
									],
									[
										15333,
										15338
									],
									[
										15585,
										15590
									],
									[
										15771,
										15776
									],
									[
										15943,
										15948
									],
									[
										16118,
										16123
									],
									[
										16280,
										16285
									],
									[
										16384,
										16389
									],
									[
										16573,
										16578
									],
									[
										16745,
										16750
									],
									[
										16933,
										16938
									],
									[
										17202,
										17207
									],
									[
										17498,
										17503
									],
									[
										17978,
										17983
									],
									[
										18239,
										18244
									],
									[
										18547,
										18552
									],
									[
										18858,
										18863
									],
									[
										19026,
										19031
									],
									[
										19223,
										19228
									],
									[
										19409,
										19414
									],
									[
										19624,
										19629
									],
									[
										19880,
										19885
									],
									[
										20049,
										20054
									],
									[
										20234,
										20239
									],
									[
										20420,
										20425
									],
									[
										20641,
										20646
									],
									[
										20881,
										20886
									],
									[
										21165,
										21170
									],
									[
										21435,
										21440
									],
									[
										21706,
										21711
									],
									[
										21976,
										21981
									],
									[
										22249,
										22254
									],
									[
										22522,
										22527
									],
									[
										22807,
										22812
									],
									[
										23098,
										23103
									],
									[
										23377,
										23382
									],
									[
										23648,
										23653
									],
									[
										23919,
										23924
									],
									[
										24190,
										24195
									],
									[
										24473,
										24478
									],
									[
										24764,
										24769
									],
									[
										25055,
										25060
									],
									[
										25345,
										25350
									],
									[
										25635,
										25640
									],
									[
										25925,
										25930
									],
									[
										26425,
										26430
									],
									[
										26653,
										26658
									],
									[
										26911,
										26916
									],
									[
										27125,
										27130
									],
									[
										27276,
										27281
									],
									[
										27437,
										27442
									],
									[
										27555,
										27560
									],
									[
										27706,
										27711
									],
									[
										27912,
										27917
									],
									[
										28346,
										28351
									],
									[
										28644,
										28649
									],
									[
										28855,
										28860
									],
									[
										28955,
										28960
									],
									[
										29174,
										29179
									],
									[
										29391,
										29396
									],
									[
										29530,
										29535
									],
									[
										29670,
										29675
									],
									[
										29829,
										29834
									],
									[
										30114,
										30119
									],
									[
										30271,
										30276
									],
									[
										30427,
										30432
									],
									[
										30744,
										30749
									],
									[
										31129,
										31134
									],
									[
										31440,
										31445
									],
									[
										31652,
										31657
									],
									[
										32041,
										32046
									],
									[
										32313,
										32318
									],
									[
										32698,
										32703
									],
									[
										33011,
										33016
									],
									[
										33276,
										33281
									],
									[
										33517,
										33522
									],
									[
										33728,
										33733
									],
									[
										33740,
										33745
									],
									[
										34013,
										34018
									],
									[
										34177,
										34182
									],
									[
										34325,
										34330
									],
									[
										34608,
										34613
									],
									[
										34805,
										34810
									],
									[
										35026,
										35031
									],
									[
										35264,
										35269
									],
									[
										35504,
										35509
									],
									[
										35647,
										35652
									],
									[
										35834,
										35839
									],
									[
										36075,
										36080
									],
									[
										36231,
										36236
									],
									[
										36472,
										36477
									],
									[
										36754,
										36759
									],
									[
										37028,
										37033
									],
									[
										37147,
										37152
									],
									[
										37354,
										37359
									],
									[
										37606,
										37611
									],
									[
										37853,
										37858
									],
									[
										38265,
										38270
									],
									[
										38461,
										38466
									],
									[
										38574,
										38579
									],
									[
										38705,
										38710
									],
									[
										38966,
										38971
									],
									[
										39098,
										39103
									],
									[
										39250,
										39255
									],
									[
										39352,
										39357
									],
									[
										39472,
										39477
									],
									[
										39733,
										39738
									],
									[
										40009,
										40014
									],
									[
										40297,
										40302
									],
									[
										40486,
										40491
									],
									[
										40708,
										40713
									],
									[
										40889,
										40894
									],
									[
										41125,
										41130
									],
									[
										41367,
										41372
									],
									[
										41661,
										41666
									],
									[
										41855,
										41860
									],
									[
										42059,
										42064
									],
									[
										42294,
										42299
									],
									[
										42556,
										42561
									],
									[
										42781,
										42786
									],
									[
										42901,
										42906
									],
									[
										43137,
										43142
									],
									[
										43340,
										43345
									],
									[
										43716,
										43721
									],
									[
										43967,
										43972
									],
									[
										44220,
										44225
									],
									[
										44486,
										44491
									],
									[
										44682,
										44687
									],
									[
										44868,
										44873
									],
									[
										45146,
										45151
									],
									[
										45357,
										45362
									],
									[
										45675,
										45680
									],
									[
										45926,
										45931
									],
									[
										46082,
										46087
									],
									[
										46263,
										46268
									],
									[
										46489,
										46494
									],
									[
										46690,
										46695
									],
									[
										46902,
										46907
									],
									[
										47139,
										47144
									],
									[
										47400,
										47405
									],
									[
										47585,
										47590
									],
									[
										47806,
										47811
									],
									[
										48021,
										48026
									],
									[
										48206,
										48211
									],
									[
										48497,
										48502
									],
									[
										48743,
										48748
									],
									[
										48951,
										48956
									],
									[
										49156,
										49161
									],
									[
										49423,
										49428
									],
									[
										49738,
										49743
									],
									[
										50050,
										50055
									],
									[
										50208,
										50213
									],
									[
										50409,
										50414
									],
									[
										50712,
										50717
									],
									[
										50961,
										50966
									],
									[
										51216,
										51221
									],
									[
										51510,
										51515
									],
									[
										51724,
										51729
									],
									[
										52022,
										52027
									],
									[
										52250,
										52255
									],
									[
										52539,
										52544
									],
									[
										52785,
										52790
									],
									[
										53078,
										53083
									],
									[
										53323,
										53328
									],
									[
										53465,
										53470
									],
									[
										53671,
										53676
									],
									[
										53887,
										53892
									],
									[
										54074,
										54079
									],
									[
										54331,
										54336
									],
									[
										54650,
										54655
									],
									[
										54806,
										54811
									],
									[
										55171,
										55176
									],
									[
										55446,
										55451
									],
									[
										55654,
										55659
									],
									[
										55833,
										55838
									],
									[
										56100,
										56105
									],
									[
										56366,
										56371
									],
									[
										56554,
										56559
									],
									[
										56768,
										56773
									],
									[
										56939,
										56944
									],
									[
										57149,
										57154
									],
									[
										57356,
										57361
									],
									[
										57567,
										57572
									],
									[
										57881,
										57886
									],
									[
										58064,
										58069
									],
									[
										58323,
										58328
									],
									[
										58556,
										58561
									],
									[
										58646,
										58651
									],
									[
										58856,
										58861
									],
									[
										58988,
										58993
									],
									[
										59158,
										59163
									],
									[
										59264,
										59269
									],
									[
										59367,
										59372
									],
									[
										59430,
										59435
									],
									[
										59609,
										59614
									],
									[
										59717,
										59722
									],
									[
										59917,
										59922
									],
									[
										60031,
										60036
									],
									[
										60099,
										60104
									],
									[
										60233,
										60238
									],
									[
										60281,
										60286
									],
									[
										60398,
										60403
									],
									[
										60582,
										60587
									],
									[
										60770,
										60775
									],
									[
										61060,
										61065
									],
									[
										61265,
										61270
									],
									[
										61450,
										61455
									],
									[
										61670,
										61675
									],
									[
										61897,
										61902
									],
									[
										62224,
										62229
									],
									[
										62505,
										62510
									],
									[
										62779,
										62784
									],
									[
										62973,
										62978
									],
									[
										63213,
										63218
									],
									[
										63447,
										63452
									],
									[
										63746,
										63751
									],
									[
										63996,
										64001
									],
									[
										64257,
										64262
									],
									[
										64491,
										64496
									],
									[
										64784,
										64789
									],
									[
										65081,
										65086
									],
									[
										65370,
										65375
									],
									[
										65609,
										65614
									],
									[
										65766,
										65771
									],
									[
										66058,
										66063
									],
									[
										66126,
										66131
									],
									[
										66289,
										66294
									],
									[
										66494,
										66499
									],
									[
										66719,
										66724
									],
									[
										66853,
										66858
									],
									[
										67241,
										67246
									],
									[
										67463,
										67468
									],
									[
										67578,
										67583
									],
									[
										67771,
										67776
									],
									[
										68061,
										68066
									],
									[
										68340,
										68345
									],
									[
										68512,
										68517
									],
									[
										68685,
										68690
									],
									[
										68874,
										68879
									],
									[
										69068,
										69073
									],
									[
										69264,
										69269
									],
									[
										69496,
										69501
									],
									[
										69738,
										69743
									],
									[
										70085,
										70090
									],
									[
										70341,
										70346
									],
									[
										70681,
										70686
									],
									[
										70955,
										70960
									],
									[
										71162,
										71167
									],
									[
										71365,
										71370
									],
									[
										71607,
										71612
									],
									[
										71778,
										71783
									],
									[
										72026,
										72031
									],
									[
										72334,
										72339
									],
									[
										72589,
										72594
									],
									[
										72695,
										72700
									],
									[
										72854,
										72859
									],
									[
										73033,
										73038
									],
									[
										73303,
										73308
									],
									[
										73541,
										73546
									],
									[
										73670,
										73675
									],
									[
										74007,
										74012
									],
									[
										74386,
										74391
									],
									[
										74663,
										74668
									],
									[
										74872,
										74877
									],
									[
										75073,
										75078
									],
									[
										75361,
										75366
									],
									[
										75476,
										75481
									],
									[
										75667,
										75672
									],
									[
										76015,
										76020
									],
									[
										76061,
										76066
									],
									[
										76440,
										76445
									],
									[
										76486,
										76491
									],
									[
										76857,
										76862
									],
									[
										76899,
										76904
									],
									[
										77341,
										77346
									],
									[
										77548,
										77553
									],
									[
										77731,
										77736
									],
									[
										77943,
										77948
									],
									[
										78150,
										78155
									],
									[
										78408,
										78413
									],
									[
										78678,
										78683
									],
									[
										79090,
										79095
									],
									[
										79383,
										79388
									],
									[
										79636,
										79641
									],
									[
										79845,
										79850
									],
									[
										79930,
										79935
									],
									[
										80099,
										80104
									],
									[
										80401,
										80406
									],
									[
										80649,
										80654
									],
									[
										80799,
										80804
									],
									[
										80991,
										80996
									],
									[
										81349,
										81354
									],
									[
										81572,
										81577
									],
									[
										81844,
										81849
									],
									[
										82064,
										82069
									],
									[
										82272,
										82277
									],
									[
										82524,
										82529
									],
									[
										82780,
										82785
									],
									[
										83044,
										83049
									],
									[
										83294,
										83299
									],
									[
										83509,
										83514
									],
									[
										83756,
										83761
									],
									[
										83994,
										83999
									],
									[
										84182,
										84187
									],
									[
										84382,
										84387
									],
									[
										84593,
										84598
									],
									[
										84804,
										84809
									],
									[
										85036,
										85041
									],
									[
										85408,
										85413
									],
									[
										85561,
										85566
									],
									[
										85847,
										85852
									],
									[
										86158,
										86163
									],
									[
										86333,
										86338
									],
									[
										86685,
										86690
									],
									[
										86976,
										86981
									],
									[
										87254,
										87259
									],
									[
										87511,
										87516
									],
									[
										87813,
										87818
									],
									[
										88110,
										88115
									],
									[
										88499,
										88504
									],
									[
										88946,
										88951
									],
									[
										89047,
										89052
									],
									[
										89214,
										89219
									],
									[
										89447,
										89452
									],
									[
										89579,
										89584
									],
									[
										89747,
										89752
									],
									[
										89882,
										89887
									],
									[
										90033,
										90038
									],
									[
										90190,
										90195
									],
									[
										90357,
										90362
									],
									[
										90549,
										90554
									],
									[
										90721,
										90726
									],
									[
										91103,
										91108
									],
									[
										91444,
										91449
									],
									[
										91686,
										91691
									],
									[
										91891,
										91896
									],
									[
										92178,
										92183
									],
									[
										92483,
										92488
									],
									[
										92716,
										92721
									],
									[
										92905,
										92910
									],
									[
										93217,
										93222
									],
									[
										93477,
										93482
									],
									[
										93777,
										93782
									],
									[
										94026,
										94031
									],
									[
										94296,
										94301
									],
									[
										94518,
										94523
									],
									[
										94696,
										94701
									],
									[
										94910,
										94915
									],
									[
										95304,
										95309
									],
									[
										95596,
										95601
									],
									[
										95849,
										95854
									],
									[
										96144,
										96149
									],
									[
										96368,
										96373
									],
									[
										96630,
										96635
									],
									[
										96815,
										96820
									],
									[
										97064,
										97069
									],
									[
										97412,
										97417
									],
									[
										97718,
										97723
									],
									[
										97984,
										97989
									],
									[
										98178,
										98183
									],
									[
										98488,
										98493
									],
									[
										98810,
										98815
									],
									[
										99116,
										99121
									],
									[
										99309,
										99314
									],
									[
										99493,
										99498
									],
									[
										99663,
										99668
									],
									[
										99847,
										99852
									],
									[
										100066,
										100071
									],
									[
										100162,
										100167
									],
									[
										100260,
										100265
									],
									[
										100366,
										100371
									],
									[
										100477,
										100482
									],
									[
										100580,
										100585
									],
									[
										100686,
										100691
									],
									[
										100792,
										100797
									],
									[
										100897,
										100902
									],
									[
										101005,
										101010
									],
									[
										101111,
										101116
									],
									[
										101214,
										101219
									],
									[
										101317,
										101322
									],
									[
										101418,
										101423
									],
									[
										101524,
										101529
									],
									[
										101625,
										101630
									],
									[
										101808,
										101813
									],
									[
										102187,
										102192
									],
									[
										102535,
										102540
									],
									[
										102942,
										102947
									],
									[
										103301,
										103306
									],
									[
										103683,
										103688
									],
									[
										103934,
										103939
									],
									[
										104108,
										104113
									],
									[
										104262,
										104267
									],
									[
										104443,
										104448
									],
									[
										104703,
										104708
									],
									[
										104967,
										104972
									],
									[
										105141,
										105146
									],
									[
										105161,
										105166
									],
									[
										105409,
										105414
									],
									[
										105621,
										105626
									],
									[
										105794,
										105799
									],
									[
										106006,
										106011
									],
									[
										106178,
										106183
									],
									[
										106351,
										106356
									],
									[
										106523,
										106528
									],
									[
										106730,
										106735
									],
									[
										106864,
										106869
									],
									[
										107056,
										107061
									],
									[
										107280,
										107285
									],
									[
										107509,
										107514
									],
									[
										107769,
										107774
									],
									[
										107999,
										108004
									],
									[
										108170,
										108175
									],
									[
										108368,
										108373
									],
									[
										108551,
										108556
									],
									[
										108579,
										108584
									],
									[
										108757,
										108762
									],
									[
										108961,
										108966
									],
									[
										109205,
										109210
									],
									[
										109389,
										109394
									],
									[
										109678,
										109683
									],
									[
										109972,
										109977
									],
									[
										110185,
										110190
									],
									[
										110411,
										110416
									],
									[
										110659,
										110664
									],
									[
										110910,
										110915
									],
									[
										111217,
										111222
									],
									[
										111408,
										111413
									],
									[
										111696,
										111701
									],
									[
										111936,
										111941
									],
									[
										112147,
										112152
									],
									[
										112480,
										112485
									],
									[
										112746,
										112751
									],
									[
										112943,
										112948
									],
									[
										113211,
										113216
									],
									[
										113427,
										113432
									],
									[
										113663,
										113668
									],
									[
										113910,
										113915
									],
									[
										114167,
										114172
									],
									[
										114450,
										114455
									],
									[
										114675,
										114680
									],
									[
										114778,
										114783
									],
									[
										114990,
										114995
									],
									[
										115258,
										115263
									],
									[
										115474,
										115479
									],
									[
										115709,
										115714
									],
									[
										115954,
										115959
									],
									[
										116211,
										116216
									],
									[
										116457,
										116462
									],
									[
										116678,
										116683
									],
									[
										116959,
										116964
									],
									[
										117177,
										117182
									],
									[
										117331,
										117336
									],
									[
										117547,
										117552
									],
									[
										117815,
										117820
									],
									[
										118031,
										118036
									],
									[
										118251,
										118256
									],
									[
										118506,
										118511
									],
									[
										118763,
										118768
									],
									[
										119045,
										119050
									],
									[
										119274,
										119279
									],
									[
										119555,
										119560
									],
									[
										119853,
										119858
									],
									[
										120065,
										120070
									],
									[
										120321,
										120326
									],
									[
										120607,
										120612
									],
									[
										120833,
										120838
									],
									[
										121095,
										121100
									],
									[
										121296,
										121301
									],
									[
										121553,
										121558
									],
									[
										121805,
										121810
									],
									[
										122017,
										122022
									],
									[
										122236,
										122241
									],
									[
										122501,
										122506
									],
									[
										122708,
										122713
									],
									[
										122914,
										122919
									],
									[
										123130,
										123135
									],
									[
										123374,
										123379
									],
									[
										123612,
										123617
									],
									[
										123870,
										123875
									],
									[
										124147,
										124152
									],
									[
										124511,
										124516
									],
									[
										124809,
										124814
									],
									[
										125005,
										125010
									],
									[
										125231,
										125236
									],
									[
										125596,
										125601
									],
									[
										125809,
										125814
									],
									[
										126053,
										126058
									],
									[
										126290,
										126295
									],
									[
										126495,
										126500
									],
									[
										126700,
										126705
									],
									[
										126836,
										126841
									],
									[
										127028,
										127033
									],
									[
										127144,
										127149
									],
									[
										127313,
										127318
									],
									[
										127491,
										127496
									],
									[
										127687,
										127692
									],
									[
										127883,
										127888
									],
									[
										128092,
										128097
									],
									[
										128320,
										128325
									],
									[
										128436,
										128441
									],
									[
										128605,
										128610
									],
									[
										128783,
										128788
									],
									[
										128979,
										128984
									],
									[
										129175,
										129180
									],
									[
										129345,
										129350
									],
									[
										129544,
										129549
									],
									[
										129660,
										129665
									],
									[
										129776,
										129781
									],
									[
										129931,
										129936
									],
									[
										130099,
										130104
									],
									[
										130237,
										130242
									],
									[
										130405,
										130410
									],
									[
										130583,
										130588
									],
									[
										130779,
										130784
									],
									[
										130975,
										130980
									],
									[
										131158,
										131163
									],
									[
										131381,
										131386
									],
									[
										131531,
										131536
									],
									[
										131651,
										131656
									],
									[
										131800,
										131805
									],
									[
										132021,
										132026
									],
									[
										132389,
										132394
									],
									[
										132678,
										132683
									],
									[
										132938,
										132943
									],
									[
										132993,
										132998
									],
									[
										133244,
										133249
									],
									[
										133552,
										133557
									],
									[
										133740,
										133745
									],
									[
										133930,
										133935
									],
									[
										134119,
										134124
									],
									[
										134328,
										134333
									],
									[
										134601,
										134606
									],
									[
										134849,
										134854
									],
									[
										135170,
										135175
									],
									[
										135421,
										135426
									],
									[
										135700,
										135705
									],
									[
										135974,
										135979
									],
									[
										136362,
										136367
									],
									[
										136577,
										136582
									],
									[
										136656,
										136661
									],
									[
										136940,
										136945
									],
									[
										137278,
										137283
									],
									[
										137577,
										137582
									],
									[
										137755,
										137760
									],
									[
										138003,
										138008
									],
									[
										138162,
										138167
									],
									[
										138404,
										138409
									],
									[
										138642,
										138647
									],
									[
										138790,
										138795
									],
									[
										139016,
										139021
									],
									[
										139229,
										139234
									],
									[
										139441,
										139446
									],
									[
										139684,
										139689
									],
									[
										139889,
										139894
									],
									[
										140118,
										140123
									],
									[
										140333,
										140338
									],
									[
										140558,
										140563
									],
									[
										140785,
										140790
									],
									[
										141042,
										141047
									],
									[
										141223,
										141228
									],
									[
										141491,
										141496
									],
									[
										141726,
										141731
									],
									[
										141961,
										141966
									],
									[
										142138,
										142143
									],
									[
										142317,
										142322
									],
									[
										142581,
										142586
									],
									[
										142760,
										142765
									],
									[
										142988,
										142993
									],
									[
										143167,
										143172
									],
									[
										143409,
										143414
									],
									[
										143636,
										143641
									],
									[
										143855,
										143860
									],
									[
										144226,
										144231
									],
									[
										144498,
										144503
									],
									[
										144826,
										144831
									],
									[
										145077,
										145082
									],
									[
										145344,
										145349
									],
									[
										145587,
										145592
									],
									[
										145871,
										145876
									],
									[
										146107,
										146112
									],
									[
										146383,
										146388
									],
									[
										146599,
										146604
									],
									[
										146895,
										146900
									],
									[
										147186,
										147191
									],
									[
										147398,
										147403
									],
									[
										147750,
										147755
									],
									[
										148078,
										148083
									],
									[
										148273,
										148278
									],
									[
										148546,
										148551
									],
									[
										148747,
										148752
									],
									[
										149075,
										149080
									],
									[
										149309,
										149314
									],
									[
										149517,
										149522
									],
									[
										149770,
										149775
									],
									[
										149978,
										149983
									],
									[
										150297,
										150302
									],
									[
										150505,
										150510
									],
									[
										150795,
										150800
									],
									[
										151052,
										151057
									],
									[
										151309,
										151314
									],
									[
										151566,
										151571
									],
									[
										151823,
										151828
									],
									[
										152080,
										152085
									],
									[
										152337,
										152342
									],
									[
										152581,
										152586
									],
									[
										152857,
										152862
									],
									[
										153166,
										153171
									],
									[
										153379,
										153384
									],
									[
										153658,
										153663
									],
									[
										153957,
										153962
									],
									[
										154239,
										154244
									],
									[
										154506,
										154511
									],
									[
										154808,
										154813
									],
									[
										155085,
										155090
									],
									[
										155389,
										155394
									],
									[
										155710,
										155715
									],
									[
										155872,
										155877
									],
									[
										156220,
										156225
									],
									[
										156283,
										156288
									],
									[
										156596,
										156601
									],
									[
										156932,
										156937
									],
									[
										157276,
										157281
									],
									[
										157641,
										157646
									],
									[
										157972,
										157977
									],
									[
										158217,
										158222
									],
									[
										158488,
										158493
									],
									[
										158780,
										158785
									],
									[
										159103,
										159108
									],
									[
										159427,
										159432
									],
									[
										159735,
										159740
									],
									[
										160057,
										160062
									],
									[
										160337,
										160342
									],
									[
										160656,
										160661
									],
									[
										160960,
										160965
									],
									[
										161236,
										161241
									],
									[
										161554,
										161559
									],
									[
										161838,
										161843
									],
									[
										162143,
										162148
									],
									[
										162436,
										162441
									],
									[
										162697,
										162702
									],
									[
										162971,
										162976
									],
									[
										163279,
										163284
									],
									[
										163620,
										163625
									],
									[
										163952,
										163957
									],
									[
										164175,
										164180
									],
									[
										164629,
										164634
									],
									[
										164922,
										164927
									],
									[
										165272,
										165277
									],
									[
										165544,
										165549
									],
									[
										165863,
										165868
									],
									[
										166171,
										166176
									],
									[
										166446,
										166451
									],
									[
										166739,
										166744
									],
									[
										167066,
										167071
									],
									[
										167313,
										167318
									],
									[
										167648,
										167653
									],
									[
										167960,
										167965
									],
									[
										168219,
										168224
									],
									[
										168486,
										168491
									],
									[
										168736,
										168741
									],
									[
										169028,
										169033
									],
									[
										169355,
										169360
									],
									[
										169516,
										169521
									],
									[
										169875,
										169880
									],
									[
										170046,
										170051
									],
									[
										170218,
										170223
									],
									[
										170377,
										170382
									],
									[
										170575,
										170580
									],
									[
										170763,
										170768
									],
									[
										171085,
										171090
									],
									[
										171361,
										171366
									],
									[
										171568,
										171573
									],
									[
										171822,
										171827
									],
									[
										172031,
										172036
									],
									[
										172249,
										172254
									],
									[
										172464,
										172469
									],
									[
										172693,
										172698
									],
									[
										173027,
										173032
									],
									[
										173388,
										173393
									],
									[
										173629,
										173634
									],
									[
										173857,
										173862
									],
									[
										174041,
										174046
									],
									[
										174259,
										174264
									],
									[
										174598,
										174603
									],
									[
										175014,
										175019
									],
									[
										175162,
										175167
									],
									[
										175417,
										175422
									],
									[
										175814,
										175819
									],
									[
										176090,
										176095
									],
									[
										176215,
										176220
									],
									[
										176483,
										176488
									],
									[
										176878,
										176883
									],
									[
										177143,
										177148
									],
									[
										177353,
										177358
									],
									[
										177631,
										177636
									],
									[
										177928,
										177933
									],
									[
										178144,
										178149
									],
									[
										178360,
										178365
									],
									[
										178576,
										178581
									],
									[
										178827,
										178832
									],
									[
										178901,
										178906
									],
									[
										179100,
										179105
									],
									[
										179357,
										179362
									],
									[
										179745,
										179750
									],
									[
										179995,
										180000
									],
									[
										180382,
										180387
									],
									[
										180661,
										180666
									],
									[
										180853,
										180858
									],
									[
										181075,
										181080
									],
									[
										181326,
										181331
									],
									[
										181462,
										181467
									],
									[
										181718,
										181723
									],
									[
										181934,
										181939
									],
									[
										182142,
										182147
									],
									[
										182478,
										182483
									],
									[
										182754,
										182759
									],
									[
										183032,
										183037
									],
									[
										183333,
										183338
									],
									[
										183555,
										183560
									],
									[
										183734,
										183739
									],
									[
										184023,
										184028
									],
									[
										184335,
										184340
									],
									[
										184616,
										184621
									],
									[
										184903,
										184908
									],
									[
										185145,
										185150
									],
									[
										185443,
										185448
									],
									[
										185613,
										185618
									],
									[
										185814,
										185819
									],
									[
										185976,
										185981
									],
									[
										186198,
										186203
									],
									[
										186378,
										186383
									],
									[
										186639,
										186644
									],
									[
										186820,
										186825
									],
									[
										187032,
										187037
									],
									[
										187220,
										187225
									],
									[
										187485,
										187490
									],
									[
										187671,
										187676
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								480,
								480
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "include/Camera.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1591,
						"regions":
						{
						},
						"selection":
						[
							[
								1200,
								1200
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								2,
								22,
								16,
								19,
								3,
								9,
								112,
								137,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557730889.87,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 379.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "tests/scop42/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3425,
						"regions":
						{
						},
						"selection":
						[
							[
								2844,
								2844
							]
						],
						"settings":
						{
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								227,
								3,
								26,
								13,
								4,
								12,
								7,
								242,
								36,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"markdonw_live_preview_last_run": 1557730599.58,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "tabGraph.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"studioLe",
				"application\\Studio\\StudioLegacyHandler.h"
			],
			[
				"studioServer",
				"application\\Studio\\StudioServer.h"
			],
			[
				"StudioPeriph",
				"application\\Studio\\StudioPeriph.cpp"
			],
			[
				"StudioPer",
				"application\\Studio\\StudioPeriph.h"
			],
			[
				"StudioSer",
				"application\\Studio\\StudioServer.cpp"
			],
			[
				"protocolPri",
				"studio-4.2\\src\\misc\\ProtocolPrivate.h"
			],
			[
				"protocolPrivate",
				"studio-4.2\\src\\conf\\ProtocolPrivate.h"
			],
			[
				"protocol.cpp",
				"studio-4.2\\src\\misc\\Protocol.cpp"
			],
			[
				"dat",
				"src\\db\\DatabaseUpdater.cpp"
			],
			[
				"databaseUpda",
				"src\\db\\DatabaseUpdater.cpp"
			],
			[
				"update",
				"etc\\db\\update-4.3.0.sql"
			],
			[
				"Asteroid.h",
				"build.vc14\\x64\\include\\issQtSdk\\Asteroid.h"
			],
			[
				"asteroid.cpp",
				"src\\issSDK\\skyExplorer\\Asteroid.cpp"
			],
			[
				"asteroid",
				"src\\osgAstro\\Asteroid.cpp"
			],
			[
				"un",
				"D:\\code\\perso\\datsun\\untitled.mtl"
			],
			[
				" reinit.xml",
				"resource\\db\\constellationIcons\\bin\\type.xml"
			],
			[
				"model3D",
				"src\\db\\Model3D.cpp"
			],
			[
				"Astrono",
				"include\\db\\AstronomicalObject.h"
			],
			[
				"Place.cpp",
				"src\\db\\Place.cpp"
			],
			[
				"asteroidMapper",
				"include\\db\\AsteroidMapper.h"
			],
			[
				"Abstractact",
				"src\\db\\AbstractAction.cpp"
			],
			[
				"Asteroid.",
				"include\\db\\Asteroid.h"
			],
			[
				"Asteroid.cpp",
				"src\\db\\Asteroid.cpp"
			],
			[
				"Comet.cpp",
				"src\\issSDK\\skyExplorer\\Comet.cpp"
			],
			[
				"legac",
				"tools\\env\\legacy.xml"
			],
			[
				"updat",
				"etc\\db\\update-4.3.0.sql"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
